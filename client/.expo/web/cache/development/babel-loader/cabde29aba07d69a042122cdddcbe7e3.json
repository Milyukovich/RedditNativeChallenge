{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/user/elbrus/PHASE 3/RedditNativeChallenge/client/src/components/EditPostForm/EditPostForm.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { editPost } from \"../../redux/actions/content\";\nexport default function EditPost(_ref) {\n  var route = _ref.route;\n  var data = route.params.data;\n  var dispatch = useDispatch();\n\n  var _useState = useState(data.title),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputTitle = _useState2[0],\n      setInputTitle = _useState2[1];\n\n  var _useState3 = useState(data.description),\n      _useState4 = _slicedToArray(_useState3, 2),\n      inputDescription = _useState4[0],\n      setInputDescription = _useState4[1];\n\n  var editPostFunction = function editPostFunction(id) {\n    if (inputTitle.trim() && inputDescription.trim()) {\n      var post = {\n        _id: data._id,\n        title: inputTitle,\n        description: inputDescription\n      };\n      dispatch(editPost(post));\n    }\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.inputContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 15\n    }\n  }, React.createElement(TextInput, {\n    onChangeText: function onChangeText(text) {\n      return setInputUsername(text);\n    },\n    style: styles.inputs,\n    value: inputUsername,\n    placeholder: \"New username\",\n    underlineColorAndroid: \"transparent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }), React.createElement(Image, {\n    style: styles.inputIcon,\n    source: {\n      uri: \"https://img.icons8.com/nolan/40/000000/email.png\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  })), React.createElement(View, {\n    style: styles.inputContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }\n  }, React.createElement(TextInput, {\n    onChangeText: function onChangeText(text) {\n      return setInputEmail(text);\n    },\n    style: styles.inputs,\n    value: inputEmail,\n    placeholder: \"New email\",\n    keyboardType: \"email-address\",\n    underlineColorAndroid: \"transparent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  })), React.createElement(TouchableOpacity, {\n    style: [styles.buttonContainer, styles.updateButton],\n    onPress: function onPress() {\n      return editProfileFunction(userId);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 15\n    }\n  }, React.createElement(Text, {\n    style: styles.updateText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, \"Update\")));\n}\nvar styles = StyleSheet.create({\n  icons: {\n    flex: 1,\n    flexDirection: \"row\",\n    justifyContent: \"center\"\n  },\n  buttonContainer: {\n    height: 45,\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginBottom: 20,\n    width: 300,\n    borderRadius: 30,\n    backgroundColor: \"transparent\"\n  },\n  updateButton: {\n    backgroundColor: \"#00b5ec\",\n    shadowColor: \"#808080\",\n    shadowOffset: {\n      width: 0,\n      height: 9\n    },\n    shadowOpacity: 0.5,\n    shadowRadius: 12.35,\n    elevation: 19\n  },\n  updateText: {\n    color: \"white\"\n  }\n});","map":{"version":3,"sources":["/Users/user/elbrus/PHASE 3/RedditNativeChallenge/client/src/components/EditPostForm/EditPostForm.jsx"],"names":["React","useEffect","useState","useDispatch","useSelector","editPost","EditPost","route","data","params","dispatch","title","inputTitle","setInputTitle","description","inputDescription","setInputDescription","editPostFunction","id","trim","post","_id","styles","container","inputContainer","text","setInputUsername","inputs","inputUsername","inputIcon","uri","setInputEmail","inputEmail","buttonContainer","updateButton","editProfileFunction","userId","updateText","StyleSheet","create","icons","flex","flexDirection","justifyContent","height","alignItems","marginBottom","width","borderRadius","backgroundColor","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","color"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;;;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,QAAT;AAEA,eAAe,SAASC,QAAT,OAA6B;AAAA,MAATC,KAAS,QAATA,KAAS;AAC1C,MAAQC,IAAR,GAAiBD,KAAK,CAACE,MAAvB,CAAQD,IAAR;AACA,MAAME,QAAQ,GAAGP,WAAW,EAA5B;;AACA,kBAAoCD,QAAQ,CAACM,IAAI,CAACG,KAAN,CAA5C;AAAA;AAAA,MAAOC,UAAP;AAAA,MAAmBC,aAAnB;;AACA,mBAAgDX,QAAQ,CAACM,IAAI,CAACM,WAAN,CAAxD;AAAA;AAAA,MAAOC,gBAAP;AAAA,MAAyBC,mBAAzB;;AAEA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,EAAE,EAAI;AAC7B,QAAIN,UAAU,CAACO,IAAX,MAAqBJ,gBAAgB,CAACI,IAAjB,EAAzB,EAAkD;AAChD,UAAMC,IAAI,GAAG;AACXC,QAAAA,GAAG,EAAEb,IAAI,CAACa,GADC;AAEXV,QAAAA,KAAK,EAAEC,UAFI;AAGXE,QAAAA,WAAW,EAAEC;AAHF,OAAb;AAKAL,MAAAA,QAAQ,CAACL,QAAQ,CAACe,IAAD,CAAT,CAAR;AACD;AACF,GATD;;AAWA,SAkBE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEE,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACU,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAED,MAAM,CAACE,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AACE,IAAA,YAAY,EAAE,sBAAAC,IAAI;AAAA,aAAIC,gBAAgB,CAACD,IAAD,CAApB;AAAA,KADpB;AAEE,IAAA,KAAK,EAAEH,MAAM,CAACK,MAFhB;AAGE,IAAA,KAAK,EAAEC,aAHT;AAIE,IAAA,WAAW,EAAC,cAJd;AAKE,IAAA,qBAAqB,EAAC,aALxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAQE,oBAAC,KAAD;AACE,IAAA,KAAK,EAAEN,MAAM,CAACO,SADhB;AAEE,IAAA,MAAM,EAAE;AACNC,MAAAA,GAAG,EAAE;AADC,KAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADV,EAiBU,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAER,MAAM,CAACE,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AACE,IAAA,YAAY,EAAE,sBAAAC,IAAI;AAAA,aAAIM,aAAa,CAACN,IAAD,CAAjB;AAAA,KADpB;AAEE,IAAA,KAAK,EAAEH,MAAM,CAACK,MAFhB;AAGE,IAAA,KAAK,EAAEK,UAHT;AAIE,IAAA,WAAW,EAAC,WAJd;AAKE,IAAA,YAAY,EAAC,eALf;AAME,IAAA,qBAAqB,EAAC,aANxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAjBV,EA2BU,oBAAC,gBAAD;AACE,IAAA,KAAK,EAAE,CAACV,MAAM,CAACW,eAAR,EAAyBX,MAAM,CAACY,YAAhC,CADT;AAEE,IAAA,OAAO,EAAE;AAAA,aAAMC,mBAAmB,CAACC,MAAD,CAAzB;AAAA,KAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEd,MAAM,CAACe,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,CA3BV,CAlBF;AAqDD;AAED,IAAMf,MAAM,GAAGgB,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAE,CADD;AAELC,IAAAA,aAAa,EAAE,KAFV;AAGLC,IAAAA,cAAc,EAAE;AAHX,GADwB;AAM/BV,EAAAA,eAAe,EAAE;AACfW,IAAAA,MAAM,EAAE,EADO;AAEfF,IAAAA,aAAa,EAAE,KAFA;AAGfC,IAAAA,cAAc,EAAE,QAHD;AAIfE,IAAAA,UAAU,EAAE,QAJG;AAKfC,IAAAA,YAAY,EAAE,EALC;AAMfC,IAAAA,KAAK,EAAE,GANQ;AAOfC,IAAAA,YAAY,EAAE,EAPC;AAQfC,IAAAA,eAAe,EAAE;AARF,GANc;AAgB/Bf,EAAAA,YAAY,EAAE;AACZe,IAAAA,eAAe,EAAE,SADL;AAGZC,IAAAA,WAAW,EAAE,SAHD;AAIZC,IAAAA,YAAY,EAAE;AACZJ,MAAAA,KAAK,EAAE,CADK;AAEZH,MAAAA,MAAM,EAAE;AAFI,KAJF;AAQZQ,IAAAA,aAAa,EAAE,GARH;AASZC,IAAAA,YAAY,EAAE,KATF;AAWZC,IAAAA,SAAS,EAAE;AAXC,GAhBiB;AA6B/BjB,EAAAA,UAAU,EAAE;AACVkB,IAAAA,KAAK,EAAE;AADG;AA7BmB,CAAlB,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { StyleSheet, View, Text, TouchableOpacity, TextInput } from \"react-native\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { editPost } from \"../../redux/actions/content\";\n\nexport default function EditPost({ route }) {\n  const { data } = route.params;\n  const dispatch = useDispatch();\n  const [inputTitle, setInputTitle] = useState(data.title);\n  const [inputDescription, setInputDescription] = useState(data.description);\n\n  const editPostFunction = id => {\n    if (inputTitle.trim() && inputDescription.trim()) {\n      const post = {\n        _id: data._id,\n        title: inputTitle,\n        description: inputDescription,\n      };\n      dispatch(editPost(post));\n    }\n  };\n\n  return (\n    // <View>\n    //     <TextInput onChangeText={text => setInputTitle(text)} value={inputTitle}>{data.title} placeholder={data.title}></TextInput>\n    //     <View>\n    //       <TextInput value={inputDescription} style={{ marginBottom: 10 }}\n    //         placeholder={data.description}></TextInput>\n    \n    //     </View>\n    //     <TouchableOpacity\n    //       style={[styles.buttonContainer, styles.updateButton]}\n    //       onPress={() => editPostFunction(data._id)}\n    //     >\n    //       <Text style={styles.updateText}>Update</Text>\n    //     </TouchableOpacity>\n    // </View>\n    \n\n\n    <View style={styles.container}>\n              <View style={styles.inputContainer}>\n                <TextInput\n                  onChangeText={text => setInputUsername(text)}\n                  style={styles.inputs}\n                  value={inputUsername}\n                  placeholder=\"New username\"\n                  underlineColorAndroid=\"transparent\"\n                />\n                <Image\n                  style={styles.inputIcon}\n                  source={{\n                    uri: \"https://img.icons8.com/nolan/40/000000/email.png\",\n                  }}\n                />\n              </View>\n\n              <View style={styles.inputContainer}>\n                <TextInput\n                  onChangeText={text => setInputEmail(text)}\n                  style={styles.inputs}\n                  value={inputEmail}\n                  placeholder=\"New email\"\n                  keyboardType=\"email-address\"\n                  underlineColorAndroid=\"transparent\"\n                />\n              </View>\n              <TouchableOpacity\n                style={[styles.buttonContainer, styles.updateButton]}\n                onPress={() => editProfileFunction(userId)}\n              >\n                <Text style={styles.updateText}>Update</Text>\n              </TouchableOpacity>\n            </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  icons: {\n    flex: 1,\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n  },\n  buttonContainer: {\n    height: 45,\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginBottom: 20,\n    width: 300,\n    borderRadius: 30,\n    backgroundColor: \"transparent\",\n  },\n  updateButton: {\n    backgroundColor: \"#00b5ec\",\n\n    shadowColor: \"#808080\",\n    shadowOffset: {\n      width: 0,\n      height: 9,\n    },\n    shadowOpacity: 0.5,\n    shadowRadius: 12.35,\n\n    elevation: 19,\n  },\n  updateText: {\n    color: \"white\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}