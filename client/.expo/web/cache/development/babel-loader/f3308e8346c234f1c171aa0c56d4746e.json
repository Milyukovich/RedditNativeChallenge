{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport apiService from \"../../api/apiService\";\nimport { GET_CONTENT_START, POST_CREATE, LIKE_ADD } from \"../types/content\";\n\nvar getContentStart = function getContentStart(payload) {\n  return {\n    type: GET_CONTENT_START,\n    payload: payload\n  };\n};\n\nvar getPostCreate = function getPostCreate(payload) {\n  return {\n    type: POST_CREATE,\n    payload: payload\n  };\n};\n\nvar ip = {\n  vlad: \"192.168.1.140\"\n};\nexport var getContent = function getContent(description) {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            apiService.post(\"http://localhost:8080/comments/add\", description).then(function () {\n              return dispatch(getContentStart(data.Posts));\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var createPost = function createPost(description) {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            apiService.post(\"http://localhost:8080/post/add\", description).then(function (_ref) {\n              var data = _ref.data;\n              return dispatch(getPostCreate(data));\n            });\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var addLike = function addLike(idUser, idPost) {\n  return function _callee3(dispatch) {\n    var response, res, currPost;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"http://localhost:8080/post/likes\", {\n              method: \"PATCH\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                idUser: idUser,\n                idPost: idPost\n              })\n            }));\n\n          case 2:\n            response = _context3.sent;\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            res = _context3.sent;\n            currPost = res.currPost;\n            return _context3.abrupt(\"return\", dispatch({\n              type: LIKE_ADD,\n              payload: currPost\n            }));\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/home/roman/elbruss/phase 3/finalproject/RedditNativeChallenge/client/src/redux/actions/content.js"],"names":["apiService","GET_CONTENT_START","POST_CREATE","LIKE_ADD","getContentStart","payload","type","getPostCreate","ip","vlad","getContent","description","dispatch","post","then","data","Posts","createPost","addLike","idUser","idPost","fetch","method","headers","body","JSON","stringify","response","json","res","currPost"],"mappings":";AAAA,OAAOA,UAAP;AACA,SAASC,iBAAT,EAA4BC,WAA5B,EAAyCC,QAAzC;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,OAAO;AAAA,SAAK;AAAEC,IAAAA,IAAI,EAAEL,iBAAR;AAA2BI,IAAAA,OAAO,EAAPA;AAA3B,GAAL;AAAA,CAA/B;;AACA,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAAAF,OAAO;AAAA,SAAK;AAAEC,IAAAA,IAAI,EAAEJ,WAAR;AAAqBG,IAAAA,OAAO,EAAPA;AAArB,GAAL;AAAA,CAA7B;;AAEA,IAAMG,EAAE,GAAG;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAX;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,WAAW;AAAA,SAAI,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AACvCZ,YAAAA,UAAU,CACPa,IADH,CACQ,oCADR,EAC8CF,WAD9C,EAEGG,IAFH,CAEQ;AAAA,qBAAMF,QAAQ,CAACR,eAAe,CAACW,IAAI,CAACC,KAAN,CAAhB,CAAd;AAAA,aAFR;;AADuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAJ;AAAA,CAA9B;AAMP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAN,WAAW;AAAA,SAAI,kBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AACvCZ,YAAAA,UAAU,CACPa,IADH,CACQ,gCADR,EAC0CF,WAD1C,EAEGG,IAFH,CAEQ;AAAA,kBAAGC,IAAH,QAAGA,IAAH;AAAA,qBAAcH,QAAQ,CAACL,aAAa,CAACQ,IAAD,CAAd,CAAtB;AAAA,aAFR;;AADuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAJ;AAAA,CAA9B;AAMP,OAAO,IAAMG,OAAO,GAAG,SAAVA,OAAU,CAACC,MAAD,EAASC,MAAT;AAAA,SAAoB,kBAAMR,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAClBS,KAAK,CAAC,kCAAD,EAAqC;AAC/DC,cAAAA,MAAM,EAAE,OADuD;AAE/DC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAFsD;AAK/DC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,gBAAAA,MAAM,EAANA,MAAF;AAAUC,gBAAAA,MAAM,EAANA;AAAV,eAAf;AALyD,aAArC,CADa;;AAAA;AACnCO,YAAAA,QADmC;AAAA;AAAA,6CAQvBA,QAAQ,CAACC,IAAT,EARuB;;AAAA;AAQnCC,YAAAA,GARmC;AASjCC,YAAAA,QATiC,GASpBD,GAToB,CASjCC,QATiC;AAAA,8CAUlClB,QAAQ,CAAC;AACdN,cAAAA,IAAI,EAAEH,QADQ;AAEdE,cAAAA,OAAO,EAAEyB;AAFK,aAAD,CAV0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;AAAA,CAAhB","sourcesContent":["import apiService from \"../../api/apiService\";\nimport { GET_CONTENT_START, POST_CREATE, LIKE_ADD } from \"../types/content\";\n\nconst getContentStart = payload => ({ type: GET_CONTENT_START, payload });\nconst getPostCreate = payload => ({ type: POST_CREATE, payload });\n\nconst ip = { vlad: \"192.168.1.140\" };\n\nexport const getContent = description => async dispatch => {\n  apiService\n    .post(\"http://localhost:8080/comments/add\", description)\n    .then(() => dispatch(getContentStart(data.Posts)));\n};\n\nexport const createPost = description => async dispatch => {\n  apiService\n    .post(\"http://localhost:8080/post/add\", description)\n    .then(({ data }) => dispatch(getPostCreate(data)));\n};\n\nexport const addLike = (idUser, idPost) => async dispatch => {\n  const response = await fetch(\"http://localhost:8080/post/likes\", {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ idUser, idPost }),\n  });\n  const res = await response.json();\n  const { currPost } = res;\n  return dispatch({\n    type: LIKE_ADD,\n    payload: currPost,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}