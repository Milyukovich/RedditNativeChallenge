{
  "ast": null,
  "code": "import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CREATE_COMMENT } from \"../types/comment\";\nvar ip = {\n  vlad: \"192.168.1.140\",\n  alina: \"192.168.1.140\"\n};\n\nvar getCommentCreate = function getCommentCreate(payload) {\n  return {\n    type: CREATE_COMMENT,\n    payload: payload\n  };\n};\n\nexport var createComMain = function createComMain(description) {\n  return function _callee(dispatch) {\n    var response, comment;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"http://localhost:8080/comment/add\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify(description)\n            }));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            comment = _context.sent;\n            console.log(comment);\n            dispatch(getCommentCreate(description));\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var createComToCom = function createComToCom(description) {\n  return function _callee2(dispatch) {\n    var response, comment;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"http://localhost:8080/comment/add\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify(description)\n            }));\n\n          case 2:\n            response = _context2.sent;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            comment = _context2.sent;\n            console.log(comment);\n            dispatch(getCommentCreate(description));\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};",
  "map": {
    "version": 3,
    "sources": [
      "/home/roman/elbruss/phase 3/finalproject/RedditNativeChallenge/client/src/redux/actions/comments.js"
    ],
    "names": [
      "CREATE_COMMENT",
      "ip",
      "vlad",
      "alina",
      "getCommentCreate",
      "payload",
      "type",
      "createComMain",
      "description",
      "dispatch",
      "fetch",
      "method",
      "headers",
      "body",
      "JSON",
      "stringify",
      "response",
      "json",
      "comment",
      "console",
      "log",
      "createComToCom"
    ],
    "mappings": ";AAAA,SAASA,cAAT;AACA,IAAMC,EAAE,GAAG;AAAEC,EAAAA,IAAI,EAAE,eAAR;AAAyBC,EAAAA,KAAK,EAAE;AAAhC,CAAX;;AACA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,OAAO;AAAA,SAAK;AAAEC,IAAAA,IAAI,EAAEN,cAAR;AAAwBK,IAAAA,OAAO,EAAPA;AAAxB,GAAL;AAAA,CAAhC;;AACA,OAAO,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,WAAW;AAAA,SAAI,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACnBC,KAAK,sCAAsC;AAChEC,cAAAA,MAAM,EAAE,MADwD;AAEhEC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAFuD;AAKhEC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,WAAf;AAL0D,aAAtC,CADc;;AAAA;AACpCQ,YAAAA,QADoC;AAAA;AAAA,6CAQpBA,QAAQ,CAACC,IAAT,EARoB;;AAAA;AAQpCC,YAAAA,OARoC;AAS1CC,YAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAT,YAAAA,QAAQ,CAACL,gBAAgB,CAACI,WAAD,CAAjB,CAAR;;AAV0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAJ;AAAA,CAAjC;AAaP,OAAO,IAAMa,cAAc,GAAG,SAAjBA,cAAiB,CAAAb,WAAW;AAAA,SAAI,kBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACpBC,KAAK,sCAAsC;AAChEC,cAAAA,MAAM,EAAE,MADwD;AAEhEC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAFuD;AAKhEC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,WAAf;AAL0D,aAAtC,CADe;;AAAA;AACrCQ,YAAAA,QADqC;AAAA;AAAA,6CAQrBA,QAAQ,CAACC,IAAT,EARqB;;AAAA;AAQrCC,YAAAA,OARqC;AAS3CC,YAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAT,YAAAA,QAAQ,CAACL,gBAAgB,CAACI,WAAD,CAAjB,CAAR;;AAV2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAJ;AAAA,CAAlC",
    "sourcesContent": [
      "import { CREATE_COMMENT } from \"../types/comment\";\nconst ip = { vlad: \"192.168.1.140\", alina: \"192.168.1.140\" };\nconst getCommentCreate = payload => ({ type: CREATE_COMMENT, payload });\nexport const createComMain = description => async dispatch => {\n  const response = await fetch(`http://localhost:8080/comment/add`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(description),\n  });\n  const comment = await response.json();\n  console.log(comment);\n  dispatch(getCommentCreate(description));\n};\n\nexport const createComToCom = description => async dispatch => {\n  const response = await fetch(`http://localhost:8080/comment/add`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(description),\n  });\n  const comment = await response.json();\n  console.log(comment);\n  dispatch(getCommentCreate(description));\n};\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
