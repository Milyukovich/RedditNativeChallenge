{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from \"axios\";\nimport deviceStorage from \"../asyncStorage\";\nimport { userPersistConfig } from \"../redux/reduce/userReducer\";\nimport { refreshToken as apiRefreshToken } from \"./auth\";\nvar apiService = axios.create({\n  baseURL: \"http://localhost:8080\"\n});\napiService.interceptors.request.use(function (config) {\n  var _userState$jwt;\n\n  debugger;\n  var userState = deviceStorage.getItem(\"user\");\n  var accessToken = userState == null ? void 0 : (_userState$jwt = userState.jwt) == null ? void 0 : _userState$jwt.access;\n\n  if (accessToken) {\n    config.headers[\"authorization\"] = \"Bearer \" + accessToken;\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\napiService.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  var _userState$jwt2;\n\n  debugger;\n  var originalRequest = error.config;\n  var userState = deviceStorage.getItem(\"user\");\n  var refreshToken = userState == null ? void 0 : (_userState$jwt2 = userState.jwt) == null ? void 0 : _userState$jwt2.refresh;\n\n  if (refreshToken && error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    return apiRefreshToken(refreshToken).then(function (response) {\n      if (response.status === 200) {\n        deviceStorage.mergeItem(\"user\", _objectSpread(_objectSpread({}, userState), {}, {\n          jwt: _objectSpread(_objectSpread({}, userState.jwt), {}, {\n            access: response.data.accessToken\n          })\n        }));\n        return apiService(originalRequest);\n      }\n    });\n  }\n});\nexport default apiService;","map":{"version":3,"sources":["/home/artur/elbrus/phase-3/RedditNativeChallenge/client/src/api/apiService.js"],"names":["axios","deviceStorage","userPersistConfig","refreshToken","apiRefreshToken","apiService","create","baseURL","interceptors","request","use","config","userState","getItem","accessToken","jwt","access","headers","error","Promise","reject","response","originalRequest","refresh","status","_retry","then","mergeItem","data"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP;AACA,SAASC,iBAAT;AACA,SAASC,YAAY,IAAIC,eAAzB;AAEA,IAAMC,UAAU,GAAGL,KAAK,CAACM,MAAN,CAAa;AAC9BC,EAAAA,OAAO,EAAE;AADqB,CAAb,CAAnB;AAIAF,UAAU,CAACG,YAAX,CAAwBC,OAAxB,CAAgCC,GAAhC,CACE,UAAAC,MAAM,EAAI;AAAA;;AACR;AACA,MAAMC,SAAS,GAAGX,aAAa,CAACY,OAAd,CAAsB,MAAtB,CAAlB;AACA,MAAMC,WAAW,GAAGF,SAAH,sCAAGA,SAAS,CAAEG,GAAd,qBAAG,eAAgBC,MAApC;;AACA,MAAIF,WAAJ,EAAiB;AACfH,IAAAA,MAAM,CAACM,OAAP,CAAe,eAAf,gBAA4CH,WAA5C;AACD;;AACD,SAAOH,MAAP;AACD,CATH,EAUE,UAAAO,KAAK;AAAA,SAAIC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAJ;AAAA,CAVP;AAaAb,UAAU,CAACG,YAAX,CAAwBa,QAAxB,CAAiCX,GAAjC,CACE,UAAAW,QAAQ;AAAA,SAAIA,QAAJ;AAAA,CADV,EAEE,UAAAH,KAAK,EAAI;AAAA;;AACP;AACA,MAAMI,eAAe,GAAGJ,KAAK,CAACP,MAA9B;AACA,MAAMC,SAAS,GAAGX,aAAa,CAACY,OAAd,CAAsB,MAAtB,CAAlB;AACA,MAAMV,YAAY,GAAGS,SAAH,uCAAGA,SAAS,CAAEG,GAAd,qBAAG,gBAAgBQ,OAArC;;AAEA,MACEpB,YAAY,IACZe,KAAK,CAACG,QAAN,CAAeG,MAAf,KAA0B,GAD1B,IAEA,CAACF,eAAe,CAACG,MAHnB,EAIE;AACAH,IAAAA,eAAe,CAACG,MAAhB,GAAyB,IAAzB;AACA,WAAOrB,eAAe,CAACD,YAAD,CAAf,CAA8BuB,IAA9B,CAAmC,UAAAL,QAAQ,EAAI;AACpD,UAAIA,QAAQ,CAACG,MAAT,KAAoB,GAAxB,EAA6B;AAC3BvB,QAAAA,aAAa,CAAC0B,SAAd,CAAwB,MAAxB,kCACKf,SADL;AAEEG,UAAAA,GAAG,kCAAOH,SAAS,CAACG,GAAjB;AAAsBC,YAAAA,MAAM,EAAEK,QAAQ,CAACO,IAAT,CAAcd;AAA5C;AAFL;AAIA,eAAOT,UAAU,CAACiB,eAAD,CAAjB;AACD;AACF,KARM,CAAP;AASD;AACF,CAxBH;AA2BA,eAAejB,UAAf","sourcesContent":["import axios from \"axios\";\nimport deviceStorage from \"../asyncStorage\";\nimport { userPersistConfig } from \"../redux/reduce/userReducer\";\nimport { refreshToken as apiRefreshToken } from \"./auth\";\n\nconst apiService = axios.create({\n  baseURL: \"http://localhost:8080\",\n});\n\napiService.interceptors.request.use(\n  config => {\n    debugger;\n    const userState = deviceStorage.getItem(\"user\");\n    const accessToken = userState?.jwt?.access;\n    if (accessToken) {\n      config.headers[\"authorization\"] = `Bearer ${accessToken}`;\n    }\n    return config;\n  },\n  error => Promise.reject(error)\n);\n\napiService.interceptors.response.use(\n  response => response,\n  error => {\n    debugger;\n    const originalRequest = error.config;\n    const userState = deviceStorage.getItem(\"user\");\n    const refreshToken = userState?.jwt?.refresh;\n\n    if (\n      refreshToken &&\n      error.response.status === 401 &&\n      !originalRequest._retry\n    ) {\n      originalRequest._retry = true;\n      return apiRefreshToken(refreshToken).then(response => {\n        if (response.status === 200) {\n          deviceStorage.mergeItem(\"user\", {\n            ...userState,\n            jwt: { ...userState.jwt, access: response.data.accessToken },\n          });\n          return apiService(originalRequest);\n        }\n      });\n    }\n  }\n);\n\nexport default apiService;\n"]},"metadata":{},"sourceType":"module"}