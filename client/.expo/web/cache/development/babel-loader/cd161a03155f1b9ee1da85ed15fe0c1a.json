{
  "ast": null,
  "code": "import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { GET_CONTENT_START, POST_CREATE } from \"../types/content\";\n\nvar getContentStart = function getContentStart(payload) {\n  return {\n    type: GET_CONTENT_START,\n    payload: payload\n  };\n};\n\nvar getPostCreate = function getPostCreate(payload) {\n  return {\n    type: POST_CREATE,\n    payload: payload\n  };\n};\n\nvar ip = {\n  vlad: \"192.168.1.140\"\n};\nexport var getContent = function getContent() {\n  return function _callee(dispatch) {\n    var response, data, post;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"http://\" + ip.vlad + \":8080/post\"));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            data = _context.sent;\n            post = data.Posts;\n            dispatch(getContentStart(post));\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var createPost = function createPost(description) {\n  return function _callee2(dispatch) {\n    var response, post;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"http://\" + ip.vlad + \":8080/post/add\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify(description)\n            }));\n\n          case 2:\n            response = _context2.sent;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            post = _context2.sent;\n            dispatch(getPostCreate(post));\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};",
  "map": {
    "version": 3,
    "sources": [
      "/Users/user/Documents/elbrus/phase 3/RedditNativeChallenge/client/src/redux/actions/content.js"
    ],
    "names": [
      "GET_CONTENT_START",
      "POST_CREATE",
      "getContentStart",
      "payload",
      "type",
      "getPostCreate",
      "ip",
      "vlad",
      "getContent",
      "dispatch",
      "fetch",
      "response",
      "json",
      "data",
      "post",
      "Posts",
      "createPost",
      "description",
      "method",
      "headers",
      "body",
      "JSON",
      "stringify"
    ],
    "mappings": ";AAAA,SAASA,iBAAT,EAA4BC,WAA5B;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,OAAO;AAAA,SAAK;AAAEC,IAAAA,IAAI,EAAEJ,iBAAR;AAA2BG,IAAAA,OAAO,EAAPA;AAA3B,GAAL;AAAA,CAA/B;;AACA,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAAAF,OAAO;AAAA,SAAK;AAAEC,IAAAA,IAAI,EAAEH,WAAR;AAAqBE,IAAAA,OAAO,EAAPA;AAArB,GAAL;AAAA,CAA7B;;AAEA,IAAMG,EAAE,GAAG;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAX;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACPC,KAAK,aAAWJ,EAAE,CAACC,IAAd,gBADE;;AAAA;AACxBI,YAAAA,QADwB;AAAA;AAAA,6CAEXA,QAAQ,CAACC,IAAT,EAFW;;AAAA;AAExBC,YAAAA,IAFwB;AAGxBC,YAAAA,IAHwB,GAGjBD,IAAI,CAACE,KAHY;AAI9BN,YAAAA,QAAQ,CAACP,eAAe,CAACY,IAAD,CAAhB,CAAR;;AAJ8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAN;AAAA,CAAnB;AAOP,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa,CAAAC,WAAW;AAAA,SAAI,kBAAMR,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAChBC,KAAK,aAAWJ,EAAE,CAACC,IAAd,qBAAoC;AAC9DW,cAAAA,MAAM,EAAE,MADsD;AAE9DC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAFqD;AAK9DC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,WAAf;AALwD,aAApC,CADW;;AAAA;AACjCN,YAAAA,QADiC;AAAA;AAAA,6CAQpBA,QAAQ,CAACC,IAAT,EARoB;;AAAA;AAQjCE,YAAAA,IARiC;AAUvCL,YAAAA,QAAQ,CAACJ,aAAa,CAACS,IAAD,CAAd,CAAR;;AAVuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAJ;AAAA,CAA9B",
    "sourcesContent": [
      "import { GET_CONTENT_START, POST_CREATE } from \"../types/content\";\n\nconst getContentStart = payload => ({ type: GET_CONTENT_START, payload });\nconst getPostCreate = payload => ({ type: POST_CREATE, payload });\n\nconst ip = { vlad: \"192.168.1.140\" };\n\nexport const getContent = () => async dispatch => {\n  const response = await fetch(`http://${ip.vlad}:8080/post`);\n  const data = await response.json();\n  const post = data.Posts;\n  dispatch(getContentStart(post));\n};\n\nexport const createPost = description => async dispatch => {\n  const response = await fetch(`http://${ip.vlad}:8080/post/add`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(description),\n  });\n  const post = await response.json();\n\n  dispatch(getPostCreate(post));\n  // dispatch(getContentStart(post));\n};\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
