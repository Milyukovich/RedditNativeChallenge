{
  "ast": null,
  "code": "import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { GET_CONTENT_START, POST_CREATE } from \"../types/content\";\nimport apiService from \"../../api/apiService\";\n\nvar getContentStart = function getContentStart(payload) {\n  return {\n    type: GET_CONTENT_START,\n    payload: payload\n  };\n};\n\nvar getPostCreate = function getPostCreate(payload) {\n  return {\n    type: POST_CREATE,\n    payload: payload\n  };\n};\n\nvar ip = {\n  vlad: \"192.168.1.140\"\n};\nexport var getContent = function getContent() {\n  return function _callee(dispatch) {\n    var response, data, post;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            apiService.get(\"http://localhost:8080/post/add\", description).then(function (_ref) {\n              var data = _ref.data;\n              return dispatch(getPostCreate(data));\n            });\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(\"http://\" + ip.vlad + \":8080/post\"));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            data = _context.sent;\n            post = data.Posts;\n            dispatch(getContentStart(post));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var createPost = function createPost(description) {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            apiService.post(\"http://localhost:8080/post/add\", description).then(function (_ref2) {\n              var data = _ref2.data;\n              return dispatch(getPostCreate(data));\n            });\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};",
  "map": {
    "version": 3,
    "sources": [
      "/home/artur/elbrus/phase-3/RedditNativeChallenge/client/src/redux/actions/content.js"
    ],
    "names": [
      "GET_CONTENT_START",
      "POST_CREATE",
      "apiService",
      "getContentStart",
      "payload",
      "type",
      "getPostCreate",
      "ip",
      "vlad",
      "getContent",
      "dispatch",
      "get",
      "description",
      "then",
      "data",
      "fetch",
      "response",
      "json",
      "post",
      "Posts",
      "createPost"
    ],
    "mappings": ";AAAA,SAASA,iBAAT,EAA4BC,WAA5B;AACA,OAAOC,UAAP;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,OAAO;AAAA,SAAK;AAAEC,IAAAA,IAAI,EAAEL,iBAAR;AAA2BI,IAAAA,OAAO,EAAPA;AAA3B,GAAL;AAAA,CAA/B;;AACA,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAAAF,OAAO;AAAA,SAAK;AAAEC,IAAAA,IAAI,EAAEJ,WAAR;AAAqBG,IAAAA,OAAO,EAAPA;AAArB,GAAL;AAAA,CAA7B;;AAEA,IAAMG,EAAE,GAAG;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAX;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9BR,YAAAA,UAAU,CACPS,GADH,CACO,gCADP,EACyCC,WADzC,EAEGC,IAFH,CAEQ;AAAA,kBAAGC,IAAH,QAAGA,IAAH;AAAA,qBAAcJ,QAAQ,CAACJ,aAAa,CAACQ,IAAD,CAAd,CAAtB;AAAA,aAFR;AAD8B;AAAA,6CAKPC,KAAK,aAAWR,EAAE,CAACC,IAAd,gBALE;;AAAA;AAKxBQ,YAAAA,QALwB;AAAA;AAAA,6CAMXA,QAAQ,CAACC,IAAT,EANW;;AAAA;AAMxBH,YAAAA,IANwB;AAOxBI,YAAAA,IAPwB,GAOjBJ,IAAI,CAACK,KAPY;AAQ9BT,YAAAA,QAAQ,CAACP,eAAe,CAACe,IAAD,CAAhB,CAAR;;AAR8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAN;AAAA,CAAnB;AAWP,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa,CAAAR,WAAW;AAAA,SAAI,kBAAMF,QAAN;AAAA;AAAA;AAAA;AAAA;AACvCR,YAAAA,UAAU,CACPgB,IADH,CACQ,gCADR,EAC0CN,WAD1C,EAEGC,IAFH,CAEQ;AAAA,kBAAGC,IAAH,SAAGA,IAAH;AAAA,qBAAcJ,QAAQ,CAACJ,aAAa,CAACQ,IAAD,CAAd,CAAtB;AAAA,aAFR;;AADuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAJ;AAAA,CAA9B",
    "sourcesContent": [
      "import { GET_CONTENT_START, POST_CREATE } from \"../types/content\";\nimport apiService from \"../../api/apiService\";\n\nconst getContentStart = payload => ({ type: GET_CONTENT_START, payload });\nconst getPostCreate = payload => ({ type: POST_CREATE, payload });\n\nconst ip = { vlad: \"192.168.1.140\" };\n\nexport const getContent = () => async dispatch => {\n  apiService\n    .get(\"http://localhost:8080/post/add\", description)\n    .then(({ data }) => dispatch(getPostCreate(data)));\n\n  const response = await fetch(`http://${ip.vlad}:8080/post`);\n  const data = await response.json();\n  const post = data.Posts;\n  dispatch(getContentStart(post));\n};\n\nexport const createPost = description => async dispatch => {\n  apiService\n    .post(\"http://localhost:8080/post/add\", description)\n    .then(({ data }) => dispatch(getPostCreate(data))); // НЕ ТРОГАТЬ ЗАХУЯРЮ!!!!!!!!!!!!!!!!!!!!!!\n  // const response = await fetch(`http://${ip.vlad}:8080/post/add`, {\n  //   method: \"POST\",\n  //   headers: {\n  //     \"Content-Type\": \"application/json\",\n  //   },\n  //   body: JSON.stringify(description),\n  // });\n  // const post = await response.json();\n\n  // dispatch(getPostCreate(post));\n\n  // dispatch(getContentStart(post));\n};\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
