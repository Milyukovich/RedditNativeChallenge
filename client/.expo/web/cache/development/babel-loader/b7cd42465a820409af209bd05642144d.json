{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from \"axios\";\nimport deviceStorage from \"../asyncStorage\";\nimport { userPersistConfig } from \"../redux/reduce/userReducer\";\nimport { refreshToken as apiRefreshToken } from \"./auth\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nvar apiService = axios.create({\n  baseURL: \"http://localhost:8080\"\n});\napiService.interceptors.request.use(function _callee(config) {\n  var _userState$jwt;\n\n  var userState, accessToken;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(deviceStorage.getItem(\"persist:user\"));\n\n        case 2:\n          userState = _context.sent;\n          console.log(userState);\n          accessToken = userState == null ? void 0 : (_userState$jwt = userState.jwt) == null ? void 0 : _userState$jwt.access;\n\n          if (accessToken) {\n            config.headers[\"authorization\"] = \"Bearer \" + accessToken;\n          }\n\n          return _context.abrupt(\"return\", config);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}, function (error) {\n  return Promise.reject(error);\n});\napiService.interceptors.response.use(function (response) {\n  return response;\n}, function _callee2(error) {\n  var originalRequest, userStateString, refreshToken, _JSON$parse, _JSON$parse$jwt;\n\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          originalRequest = error.config;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(deviceStorage.getItem(\"persist:user\"));\n\n        case 3:\n          userStateString = _context2.sent;\n          refreshToken = null;\n\n          if (userStateString) {\n            refreshToken = (_JSON$parse = JSON.parse(userStateString)) == null ? void 0 : (_JSON$parse$jwt = _JSON$parse.jwt) == null ? void 0 : _JSON$parse$jwt.refresh;\n          }\n\n          if (!(refreshToken && error.response.status === 401 && !originalRequest._retry)) {\n            _context2.next = 9;\n            break;\n          }\n\n          originalRequest._retry = true;\n          return _context2.abrupt(\"return\", apiRefreshToken(refreshToken).then(function (response) {\n            if (response.status === 200) {\n              deviceStorage.mergeItem(\"user\", _objectSpread(_objectSpread({}, userState), {}, {\n                jwt: _objectSpread(_objectSpread({}, userState.jwt), {}, {\n                  access: response.data.accessToken\n                })\n              }));\n              return apiService(originalRequest);\n            }\n          }));\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});\nexport default apiService;","map":{"version":3,"sources":["/home/artur/elbrus/phase-3/RedditNativeChallenge/client/src/api/apiService.js"],"names":["axios","deviceStorage","userPersistConfig","refreshToken","apiRefreshToken","AsyncStorage","apiService","create","baseURL","interceptors","request","use","config","getItem","userState","console","log","accessToken","jwt","access","headers","error","Promise","reject","response","originalRequest","userStateString","JSON","parse","refresh","status","_retry","then","mergeItem","data"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP;AACA,SAASC,iBAAT;AACA,SAASC,YAAY,IAAIC,eAAzB;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AAEA,IAAMC,UAAU,GAAGN,KAAK,CAACO,MAAN,CAAa;AAC9BC,EAAAA,OAAO,EAAE;AADqB,CAAb,CAAnB;AAIAF,UAAU,CAACG,YAAX,CAAwBC,OAAxB,CAAgCC,GAAhC,CACE,iBAAMC,MAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAE0BX,aAAa,CAACY,OAAd,CAAsB,cAAtB,CAF1B;;AAAA;AAEQC,UAAAA,SAFR;AAGEC,UAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACMG,UAAAA,WAJR,GAIsBH,SAJtB,sCAIsBA,SAAS,CAAEI,GAJjC,qBAIsB,eAAgBC,MAJtC;;AAKE,cAAIF,WAAJ,EAAiB;AACfL,YAAAA,MAAM,CAACQ,OAAP,CAAe,eAAf,gBAA4CH,WAA5C;AACD;;AAPH,2CAQSL,MART;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CADF,EAWE,UAAAS,KAAK;AAAA,SAAIC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAJ;AAAA,CAXP;AAcAf,UAAU,CAACG,YAAX,CAAwBe,QAAxB,CAAiCb,GAAjC,CACE,UAAAa,QAAQ;AAAA,SAAIA,QAAJ;AAAA,CADV,EAEE,kBAAMH,KAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACQI,UAAAA,eADR,GAC0BJ,KAAK,CAACT,MADhC;AAAA;AAAA,2CAGgCX,aAAa,CAACY,OAAd,CAAsB,cAAtB,CAHhC;;AAAA;AAGQa,UAAAA,eAHR;AAIMvB,UAAAA,YAJN,GAIqB,IAJrB;;AAKE,cAAIuB,eAAJ,EAAqB;AACnBvB,YAAAA,YAAY,kBAAGwB,IAAI,CAACC,KAAL,CAAWF,eAAX,CAAH,wCAAG,YAA6BR,GAAhC,qBAAG,gBAAkCW,OAAjD;AACD;;AAPH,gBAUI1B,YAAY,IACZkB,KAAK,CAACG,QAAN,CAAeM,MAAf,KAA0B,GAD1B,IAEA,CAACL,eAAe,CAACM,MAZrB;AAAA;AAAA;AAAA;;AAcIN,UAAAA,eAAe,CAACM,MAAhB,GAAyB,IAAzB;AAdJ,4CAeW3B,eAAe,CAACD,YAAD,CAAf,CAA8B6B,IAA9B,CAAmC,UAAAR,QAAQ,EAAI;AACpD,gBAAIA,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3B7B,cAAAA,aAAa,CAACgC,SAAd,CAAwB,MAAxB,kCACKnB,SADL;AAEEI,gBAAAA,GAAG,kCAAOJ,SAAS,CAACI,GAAjB;AAAsBC,kBAAAA,MAAM,EAAEK,QAAQ,CAACU,IAAT,CAAcjB;AAA5C;AAFL;AAIA,qBAAOX,UAAU,CAACmB,eAAD,CAAjB;AACD;AACF,WARM,CAfX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAFF;AA8BA,eAAenB,UAAf","sourcesContent":["import axios from \"axios\";\nimport deviceStorage from \"../asyncStorage\";\nimport { userPersistConfig } from \"../redux/reduce/userReducer\";\nimport { refreshToken as apiRefreshToken } from \"./auth\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nconst apiService = axios.create({\n  baseURL: \"http://localhost:8080\",\n});\n\napiService.interceptors.request.use(\n  async config => {\n    \n    const userState = await deviceStorage.getItem(\"persist:user\");\n    console.log(userState);\n    const accessToken = userState?.jwt?.access;\n    if (accessToken) {\n      config.headers[\"authorization\"] = `Bearer ${accessToken}`;\n    }\n    return config;\n  },\n  error => Promise.reject(error)\n);\n\napiService.interceptors.response.use(\n  response => response,\n  async error => {\n    const originalRequest = error.config;\n\n    const userStateString = await deviceStorage.getItem(\"persist:user\");\n    let refreshToken = null;\n    if (userStateString) {\n      refreshToken = JSON.parse(userStateString)?.jwt?.refresh;\n    }\n\n    if (\n      refreshToken &&\n      error.response.status === 401 &&\n      !originalRequest._retry\n    ) {\n      originalRequest._retry = true;\n      return apiRefreshToken(refreshToken).then(response => {\n        if (response.status === 200) {\n          deviceStorage.mergeItem(\"user\", {\n            ...userState,\n            jwt: { ...userState.jwt, access: response.data.accessToken },\n          });\n          return apiService(originalRequest);\n        }\n      });\n    }\n  }\n);\n\nexport default apiService;\n"]},"metadata":{},"sourceType":"module"}