{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/artur/elbrus/phase-3/RedditNativeChallenge/client/src/components/TestAddPost/TestAddPost.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useContext } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport moment from \"moment\";\nimport ActionButton from \"react-native-action-button\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport ImagePicker from \"react-native-image-crop-picker\";\nimport { InputField, InputWrapper, AddImage, SubmitBtn, SubmitBtnText, StatusWrapper } from \"../styles/AddPost\";\nimport { createPost } from \"../../redux/actions/content\";\nexport var AddPostScreen = function AddPostScreen() {\n  var dispatch = useDispatch();\n  var user = useSelector(function (state) {\n    return state.user;\n  });\n  var navigation = useNavigation();\n\n  var loadScene = function loadScene() {\n    navigation.navigate(\"MainPage\");\n  };\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      title = _useState2[0],\n      setTitle = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      description = _useState4[0],\n      setDescription = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      tags = _useState6[0],\n      setTags = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      image = _useState8[0],\n      setImage = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      uploading = _useState10[0],\n      setUploading = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      transferred = _useState12[0],\n      setTransferred = _useState12[1];\n\n  var _useState13 = useState(null),\n      _useState14 = _slicedToArray(_useState13, 2),\n      post = _useState14[0],\n      setPost = _useState14[1];\n\n  var takePhotoFromCamera = function takePhotoFromCamera() {\n    ImagePicker.openCamera({\n      width: 1200,\n      height: 780,\n      cropping: true\n    }).then(function (image) {\n      console.log(image);\n      var imageUri = Platform.OS === \"ios\" ? image.sourceURL : image.path;\n      setImage(imageUri);\n    });\n  };\n\n  var choosePhotoFromLibrary = function choosePhotoFromLibrary() {\n    ImagePicker.openPicker({\n      width: 1200,\n      height: 780,\n      cropping: true\n    }).then(function (image) {\n      console.log(image);\n      var imageUri = Platform.OS === \"ios\" ? image.sourceURL : image.path;\n      setImage(imageUri);\n    });\n  };\n\n  var submitPost = function submitPost() {\n    var imageUrl, allTags, _post;\n\n    return _regeneratorRuntime.async(function submitPost$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(uploadImage());\n\n          case 2:\n            imageUrl = _context.sent;\n            console.log(\"Image Url: \", imageUrl);\n            console.log(\"Post: \", post);\n\n            if (title.trim() && description.trim()) {\n              allTags = tags.split(\"#\");\n              allTags.forEach(function (el, index) {\n                allTags[index] = allTags[index].trim().toLowerCase();\n              });\n              _post = {\n                author: user.id,\n                title: title,\n                description: description,\n                date: moment().endOf(\"day\").fromNow(),\n                tags: allTags\n              };\n              setTitle(\"\");\n              setDescription(\"\");\n              setTags(\"\");\n              dispatch(createPost(_post));\n              loadScene();\n            }\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var uploadImage = function uploadImage() {\n    var uploadUri, filename, extension, name;\n    return _regeneratorRuntime.async(function uploadImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(image == null)) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", null);\n\n          case 2:\n            uploadUri = image;\n            filename = uploadUri.substring(uploadUri.lastIndexOf(\"/\") + 1);\n            extension = filename.split(\".\").pop();\n            name = filename.split(\".\").slice(0, -1).join(\".\");\n            filename = name + Date.now() + \".\" + extension;\n            setUploading(true);\n            setTransferred(0);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 5\n    }\n  }, React.createElement(InputWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }, image != null ? React.createElement(AddImage, {\n    source: {\n      uri: image\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 26\n    }\n  }) : null, React.createElement(InputField, {\n    placeholder: \"What's on your mind?\",\n    multiline: true,\n    numberOfLines: 4,\n    value: post,\n    onChangeText: function onChangeText(content) {\n      return setPost(content);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }\n  }), uploading ? React.createElement(StatusWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }\n  }, transferred, \" % Completed!\"), React.createElement(ActivityIndicator, {\n    size: \"large\",\n    color: \"#0000ff\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }\n  })) : React.createElement(SubmitBtn, {\n    onPress: submitPost,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 11\n    }\n  }, React.createElement(SubmitBtnText, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }\n  }, \"Post\"))), React.createElement(ActionButton, {\n    buttonColor: \"#2e64e5\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  }, React.createElement(ActionButton.Item, {\n    buttonColor: \"#9b59b6\",\n    title: \"Take Photo\",\n    onPress: takePhotoFromCamera,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }, React.createElement(Icon, {\n    name: \"camera-outline\",\n    style: styles.actionButtonIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 11\n    }\n  })), React.createElement(ActionButton.Item, {\n    buttonColor: \"#3498db\",\n    title: \"Choose Photo\",\n    onPress: choosePhotoFromLibrary,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  }, React.createElement(Icon, {\n    name: \"md-images-outline\",\n    style: styles.actionButtonIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 11\n    }\n  }))));\n};\nexport default AddPostScreen;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  actionButtonIcon: {\n    fontSize: 20,\n    height: 22,\n    color: \"white\"\n  }\n});","map":{"version":3,"sources":["/home/artur/elbrus/phase-3/RedditNativeChallenge/client/src/components/TestAddPost/TestAddPost.js"],"names":["React","useState","useContext","useSelector","useDispatch","useNavigation","moment","ActionButton","Icon","ImagePicker","InputField","InputWrapper","AddImage","SubmitBtn","SubmitBtnText","StatusWrapper","createPost","AddPostScreen","dispatch","user","state","navigation","loadScene","navigate","title","setTitle","description","setDescription","tags","setTags","image","setImage","uploading","setUploading","transferred","setTransferred","post","setPost","takePhotoFromCamera","openCamera","width","height","cropping","then","console","log","imageUri","Platform","OS","sourceURL","path","choosePhotoFromLibrary","openPicker","submitPost","uploadImage","imageUrl","trim","allTags","split","forEach","el","index","toLowerCase","author","id","date","endOf","fromNow","uploadUri","filename","substring","lastIndexOf","extension","pop","name","slice","join","Date","now","styles","container","uri","content","actionButtonIcon","StyleSheet","create","flex","alignItems","justifyContent","fontSize","color"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  View,\n  Text,\n  Platform,\n  StyleSheet,\n  Alert,\n  ActivityIndicator,\n} from \"react-native\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport moment from \"moment\";\nimport ActionButton from \"react-native-action-button\";\nimport Icon from \"react-native-vector-icons/Ionicons\";\nimport ImagePicker from \"react-native-image-crop-picker\";\n\nimport {\n  InputField,\n  InputWrapper,\n  AddImage,\n  SubmitBtn,\n  SubmitBtnText,\n  StatusWrapper,\n} from \"../styles/AddPost\";\nimport { createPost } from \"../../redux/actions/content\";\n\nexport const AddPostScreen = () => {\n  const dispatch = useDispatch();\n  const user = useSelector(state => state.user);\n\n  const navigation = useNavigation();\n\n  const loadScene = () => {\n    navigation.navigate(\"MainPage\");\n  };\n\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [tags, setTags] = useState(\"\");\n\n  const [image, setImage] = useState(null);\n  const [uploading, setUploading] = useState(false);\n  const [transferred, setTransferred] = useState(0);\n  const [post, setPost] = useState(null);\n\n  const takePhotoFromCamera = () => {\n    ImagePicker.openCamera({\n      width: 1200,\n      height: 780,\n      cropping: true,\n    }).then(image => {\n      console.log(image);\n      const imageUri = Platform.OS === \"ios\" ? image.sourceURL : image.path;\n      setImage(imageUri);\n    });\n  };\n\n  const choosePhotoFromLibrary = () => {\n    ImagePicker.openPicker({\n      width: 1200,\n      height: 780,\n      cropping: true,\n    }).then(image => {\n      console.log(image);\n      const imageUri = Platform.OS === \"ios\" ? image.sourceURL : image.path;\n      setImage(imageUri);\n    });\n  };\n\n  const submitPost = async () => {\n    const imageUrl = await uploadImage();\n    console.log(\"Image Url: \", imageUrl);\n    console.log(\"Post: \", post);\n    if (title.trim() && description.trim()) {\n      const allTags = tags.split(\"#\");\n      allTags.forEach((el, index) => {\n        allTags[index] = allTags[index].trim().toLowerCase();\n      });\n      const post = {\n        author: user.id,\n        title: title,\n        description: description,\n        date: moment().endOf(\"day\").fromNow(),\n        tags: allTags,\n      };\n      setTitle(\"\");\n      setDescription(\"\");\n      setTags(\"\");\n      dispatch(createPost(post));\n      loadScene();\n    }\n    // firestore()\n    //   .collection(\"posts\")\n    //   .add({\n    //     userId: user.uid,\n    //     post: post,\n    //     postImg: imageUrl,\n    //     postTime: firestore.Timestamp.fromDate(new Date()),\n    //     likes: null,\n    //     comments: null,\n    //   })\n    //   .then(() => {\n    //     console.log(\"Post Added!\");\n    //     Alert.alert(\n    //       \"Post published!\",\n    //       \"Your post has been published Successfully!\"\n    //     );\n    //     setPost(null);\n    //   })\n    //   .catch(error => {\n    //     console.log(\n    //       \"Something went wrong with added post to firestore.\",\n    //       error\n    //     );\n    //   });\n  };\n\n  const uploadImage = async () => {\n    if (image == null) {\n      return null;\n    }\n    const uploadUri = image;\n    let filename = uploadUri.substring(uploadUri.lastIndexOf(\"/\") + 1);\n\n    // Add timestamp to File Name\n    const extension = filename.split(\".\").pop();\n    const name = filename.split(\".\").slice(0, -1).join(\".\");\n    filename = name + Date.now() + \".\" + extension;\n\n    setUploading(true);\n    setTransferred(0);\n\n    // const storageRef = storage().ref(`photos/${filename}`);\n    // const task = storageRef.putFile(uploadUri);\n\n    // Set transferred state\n    // task.on(\"state_changed\", taskSnapshot => {\n    //   console.log(\n    //     `${taskSnapshot.bytesTransferred} transferred out of ${taskSnapshot.totalBytes}`\n    //   );\n\n    //   setTransferred(\n    //     Math.round(taskSnapshot.bytesTransferred / taskSnapshot.totalBytes) *\n    //       100\n    //   );\n    // });\n\n    // try {\n    //   // await task;\n\n    //   // const url = await storageRef.getDownloadURL();\n\n    //   setUploading(false);\n    //   setImage(null);\n\n    //   // Alert.alert(\n    //   //   'Image uploaded!',\n    //   //   'Your image has been uploaded to the Firebase Cloud Storage Successfully!',\n    //   // );\n    //   return url;\n    // } catch (e) {\n    //   console.log(e);\n    //   return null;\n    // }\n  };\n\n  return (\n    <View style={styles.container}>\n      <InputWrapper>\n        {image != null ? <AddImage source={{ uri: image }} /> : null}\n\n        <InputField\n          placeholder=\"What's on your mind?\"\n          multiline\n          numberOfLines={4}\n          value={post}\n          onChangeText={content => setPost(content)}\n        />\n        {uploading ? (\n          <StatusWrapper>\n            <Text>{transferred} % Completed!</Text>\n            <ActivityIndicator size=\"large\" color=\"#0000ff\" />\n          </StatusWrapper>\n        ) : (\n          <SubmitBtn onPress={submitPost}>\n            <SubmitBtnText>Post</SubmitBtnText>\n          </SubmitBtn>\n        )}\n      </InputWrapper>\n      <ActionButton buttonColor=\"#2e64e5\">\n        <ActionButton.Item\n          buttonColor=\"#9b59b6\"\n          title=\"Take Photo\"\n          onPress={takePhotoFromCamera}\n        >\n          <Icon name=\"camera-outline\" style={styles.actionButtonIcon} />\n        </ActionButton.Item>\n        <ActionButton.Item\n          buttonColor=\"#3498db\"\n          title=\"Choose Photo\"\n          onPress={choosePhotoFromLibrary}\n        >\n          <Icon name=\"md-images-outline\" style={styles.actionButtonIcon} />\n        </ActionButton.Item>\n      </ActionButton>\n    </View>\n  );\n};\n\nexport default AddPostScreen;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  actionButtonIcon: {\n    fontSize: 20,\n    height: 22,\n    color: \"white\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}