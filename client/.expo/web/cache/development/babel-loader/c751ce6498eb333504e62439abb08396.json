{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CREATE_COMMENT, CREATE_COMMENT_TO_COMMENT } from \"../types/comment\";\nimport apiService from \"../../api/apiService\";\n\nvar getCommentCreate = function getCommentCreate(payload) {\n  return {\n    type: CREATE_COMMENT,\n    payload: payload\n  };\n};\n\nvar getComToComtCreate = function getComToComtCreate(payload) {\n  return {\n    type: CREATE_COMMENT_TO_COMMENT,\n    payload: payload\n  };\n};\n\nexport var createComMain = function createComMain(description) {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            apiService.post(\"/comment/add\", description).then(function (_ref) {\n              var data = _ref.data;\n              console.log(data);\n              dispatch(getCommentCreate({\n                data: data,\n                description: description\n              }));\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var createComToCom = function createComToCom(description) {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log(description);\n            apiService.post(\"/comment/addcomtocom\", description).then(function (_ref2) {\n              var data = _ref2.data;\n              dispatch(getComToComtCreate({\n                data: data,\n                description: description\n              }));\n            });\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/home/artur/elbrus/phase-3/RedditNativeChallenge/client/src/redux/actions/comments.js"],"names":["CREATE_COMMENT","CREATE_COMMENT_TO_COMMENT","apiService","getCommentCreate","payload","type","getComToComtCreate","createComMain","description","dispatch","post","then","data","console","log","createComToCom"],"mappings":";AAAA,SAASA,cAAT,EAAyBC,yBAAzB;AACA,OAAOC,UAAP;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,OAAO;AAAA,SAAK;AAAEC,IAAAA,IAAI,EAAEL,cAAR;AAAwBI,IAAAA,OAAO,EAAPA;AAAxB,GAAL;AAAA,CAAhC;;AACA,IAAME,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAF,OAAO;AAAA,SAAK;AACrCC,IAAAA,IAAI,EAAEJ,yBAD+B;AAErCG,IAAAA,OAAO,EAAPA;AAFqC,GAAL;AAAA,CAAlC;;AAIA,OAAO,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,WAAW;AAAA,SAAI,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAC1CP,YAAAA,UAAU,CAACQ,IAAX,CAAgB,cAAhB,EAAgCF,WAAhC,EAA6CG,IAA7C,CAAkD,gBAAc;AAAA,kBAAXC,IAAW,QAAXA,IAAW;AAC9DC,cAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAH,cAAAA,QAAQ,CAACN,gBAAgB,CAAC;AAAES,gBAAAA,IAAI,EAAJA,IAAF;AAAQJ,gBAAAA,WAAW,EAAXA;AAAR,eAAD,CAAjB,CAAR;AACD,aAHD;;AAD0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAJ;AAAA,CAAjC;AAOP,OAAO,IAAMO,cAAc,GAAG,SAAjBA,cAAiB,CAAAP,WAAW;AAAA,SAAI,kBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAC3CI,YAAAA,OAAO,CAACC,GAAR,CAAYN,WAAZ;AACAN,YAAAA,UAAU,CAACQ,IAAX,CAAgB,sBAAhB,EAAwCF,WAAxC,EAAqDG,IAArD,CAA0D,iBAAc;AAAA,kBAAXC,IAAW,SAAXA,IAAW;AAEtEH,cAAAA,QAAQ,CAACH,kBAAkB,CAAC;AAAEM,gBAAAA,IAAI,EAAJA,IAAF;AAAQJ,gBAAAA,WAAW,EAAXA;AAAR,eAAD,CAAnB,CAAR;AACD,aAHD;;AAF2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAJ;AAAA,CAAlC","sourcesContent":["import { CREATE_COMMENT, CREATE_COMMENT_TO_COMMENT } from \"../types/comment\";\nimport apiService from \"../../api/apiService\";\n\nconst getCommentCreate = payload => ({ type: CREATE_COMMENT, payload });\nconst getComToComtCreate = payload => ({\n  type: CREATE_COMMENT_TO_COMMENT,\n  payload,\n});\nexport const createComMain = description => async dispatch => {\n  apiService.post(\"/comment/add\", description).then(({ data }) => {\n    console.log(data);\n    dispatch(getCommentCreate({ data, description }));\n  });\n};\n\nexport const createComToCom = description => async dispatch => {\n  console.log(description);\n  apiService.post(\"/comment/addcomtocom\", description).then(({ data }) => {\n    // console.log(\"DATA\", data);\n    dispatch(getComToComtCreate({ data, description }));\n  });\n};\n"]},"metadata":{},"sourceType":"module"}