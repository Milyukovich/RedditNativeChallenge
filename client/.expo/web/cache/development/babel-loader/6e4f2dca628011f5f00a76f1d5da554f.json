{
  "ast": null,
  "code": "import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar ip = {\n  vlad: \"192.168.1.140\"\n};\n\nvar getCommentCreate = function getCommentCreate(payload) {\n  return {\n    type: CREATE_COMMENT_,\n    payload: payload\n  };\n};\n\nexport var createComMain = function createComMain(description) {\n  return function _callee(dispatch) {\n    var response, post;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"http://\" + ip.vlad + \":8080/comment/add\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify(description)\n            }));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            post = _context.sent;\n            dispatch(getCommentCreate(post));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};",
  "map": {
    "version": 3,
    "sources": [
      "/home/roman/elbruss/phase 3/finalproject/RedditNativeChallenge/client/src/redux/actions/comments.js"
    ],
    "names": [
      "ip",
      "vlad",
      "getCommentCreate",
      "payload",
      "type",
      "CREATE_COMMENT_",
      "createComMain",
      "description",
      "dispatch",
      "fetch",
      "method",
      "headers",
      "body",
      "JSON",
      "stringify",
      "response",
      "json",
      "post"
    ],
    "mappings": ";AACA,IAAMA,EAAE,GAAG;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAX;;AACA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,OAAO;AAAA,SAAK;AAAEC,IAAAA,IAAI,EAAEC,eAAR;AAAyBF,IAAAA,OAAO,EAAPA;AAAzB,GAAL;AAAA,CAAhC;;AACA,OAAO,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,WAAW;AAAA,SAAI,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACnBC,KAAK,aAAWT,EAAE,CAACC,IAAd,wBAAuC;AACjES,cAAAA,MAAM,EAAE,MADyD;AAEjEC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAFwD;AAKjEC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,WAAf;AAL2D,aAAvC,CADc;;AAAA;AACpCQ,YAAAA,QADoC;AAAA;AAAA,6CAQvBA,QAAQ,CAACC,IAAT,EARuB;;AAAA;AAQpCC,YAAAA,IARoC;AAU1CT,YAAAA,QAAQ,CAACN,gBAAgB,CAACe,IAAD,CAAjB,CAAR;;AAV0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAJ;AAAA,CAAjC",
    "sourcesContent": [
      "\nconst ip = { vlad: \"192.168.1.140\" };\nconst getCommentCreate = payload => ({ type: CREATE_COMMENT_, payload });\nexport const createComMain = description => async dispatch => {\n  const response = await fetch(`http://${ip.vlad}:8080/comment/add`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(description),\n  });\n  const post = await response.json();\n\n  dispatch(getCommentCreate(post));\n};\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
