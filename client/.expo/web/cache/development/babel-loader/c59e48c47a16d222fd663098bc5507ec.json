{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GET_CONTENT_START, POST_CREATE, LIKE_ADD } from \"../types/content\";\nimport { CREATE_COMMENT, CREATE_COMMENT_TO_COMMENT } from \"../types/comment\";\nvar initialState = [];\n\nvar contentReducer = function contentReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var type = action.type,\n      payload = action.payload;\n\n  switch (type) {\n    case GET_CONTENT_START:\n      {\n        return payload;\n      }\n\n    case POST_CREATE:\n      {\n        return [].concat(_toConsumableArray(state), [payload]);\n      }\n\n    case LIKE_ADD:\n      {\n        return state.map(function (el) {\n          return el._id === payload._id ? payload : el;\n        });\n      }\n\n    case CREATE_COMMENT:\n      {\n        var text = payload.text,\n            autorId = payload.autorId,\n            postId = payload.postId;\n        return state.map(function (el) {\n          return el._id == postId ? _objectSpread(_objectSpread({}, el), {}, {\n            comments: [].concat(_toConsumableArray(el.comments), [{\n              text: text,\n              autor: autorId\n            }])\n          }) : el;\n        });\n      }\n\n    case CREATE_COMMENT_TO_COMMENT:\n      {\n        console.log(\"ya tut\");\n        console.log(payload);\n        var comment = payload.data;\n        console.log(\"comment\", comment);\n        var mainId = payload.description.mainId;\n        console.log(\"mainId\", mainId);\n        return state.map(function (el) {\n          return el._id == mainId ? _objectSpread(_objectSpread({}, el), {}, {\n            comments: _toConsumableArray(el.comments.map(function (el) {\n              return el == payload.description.commentId ? _objectSpread({}, el) : el;\n            }))\n          }) : el;\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default contentReducer;","map":{"version":3,"sources":["/home/roman/elbruss/phase 3/finalproject/RedditNativeChallenge/client/src/redux/reduce/contentReducer.js"],"names":["GET_CONTENT_START","POST_CREATE","LIKE_ADD","CREATE_COMMENT","CREATE_COMMENT_TO_COMMENT","initialState","contentReducer","state","action","type","payload","map","el","_id","text","autorId","postId","comments","autor","console","log","comment","data","mainId","description","commentId"],"mappings":";;;;;;;AAAA,SAASA,iBAAT,EAA4BC,WAA5B,EAAyCC,QAAzC;AACA,SAASC,cAAT,EAAyBC,yBAAzB;AAEA,IAAMC,YAAY,GAAG,EAArB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;AACvD,MAAQC,IAAR,GAA0BD,MAA1B,CAAQC,IAAR;AAAA,MAAcC,OAAd,GAA0BF,MAA1B,CAAcE,OAAd;;AAEA,UAAQD,IAAR;AACE,SAAKT,iBAAL;AAAwB;AACtB,eAAOU,OAAP;AACD;;AACD,SAAKT,WAAL;AAAkB;AAChB,4CAAWM,KAAX,IAAkBG,OAAlB;AACD;;AACD,SAAKR,QAAL;AAAe;AACb,eAAOK,KAAK,CAACI,GAAN,CAAU,UAAAC,EAAE;AAAA,iBAAKA,EAAE,CAACC,GAAH,KAAWH,OAAO,CAACG,GAAnB,GAAyBH,OAAzB,GAAmCE,EAAxC;AAAA,SAAZ,CAAP;AACD;;AACD,SAAKT,cAAL;AAAqB;AACnB,YAAQW,IAAR,GAAkCJ,OAAlC,CAAQI,IAAR;AAAA,YAAcC,OAAd,GAAkCL,OAAlC,CAAcK,OAAd;AAAA,YAAuBC,MAAvB,GAAkCN,OAAlC,CAAuBM,MAAvB;AACA,eAAOT,KAAK,CAACI,GAAN,CAAU,UAAAC,EAAE;AAAA,iBACjBA,EAAE,CAACC,GAAH,IAAUG,MAAV,mCACSJ,EADT;AACaK,YAAAA,QAAQ,+BAAML,EAAE,CAACK,QAAT,IAAmB;AAAEH,cAAAA,IAAI,EAAJA,IAAF;AAAQI,cAAAA,KAAK,EAAEH;AAAf,aAAnB;AADrB,eAEIH,EAHa;AAAA,SAAZ,CAAP;AAKD;;AACD,SAAKR,yBAAL;AAAgC;AAC9Be,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYV,OAAZ;AACA,YAAMW,OAAO,GAAGX,OAAO,CAACY,IAAxB;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,OAAvB;AACA,YAAME,MAAM,GAAGb,OAAO,CAACc,WAAR,CAAoBD,MAAnC;AACAJ,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBG,MAAtB;AAEA,eAAOhB,KAAK,CAACI,GAAN,CAAU,UAAAC,EAAE;AAAA,iBACjBA,EAAE,CAACC,GAAH,IAAUU,MAAV,mCAESX,EAFT;AAGMK,YAAAA,QAAQ,qBACHL,EAAE,CAACK,QAAH,CAAYN,GAAZ,CAAgB,UAAAC,EAAE;AAAA,qBACnBA,EAAE,IAAIF,OAAO,CAACc,WAAR,CAAoBC,SAA1B,qBAA4Cb,EAA5C,IAAmDA,EADhC;AAAA,aAAlB,CADG;AAHd,eASIA,EAVa;AAAA,SAAZ,CAAP;AAYD;;AACD;AACE,aAAOL,KAAP;AAxCJ;AA0CD,CA7CD;;AA8CA,eAAeD,cAAf","sourcesContent":["import { GET_CONTENT_START, POST_CREATE, LIKE_ADD } from \"../types/content\";\nimport { CREATE_COMMENT, CREATE_COMMENT_TO_COMMENT } from \"../types/comment\";\n\nconst initialState = [];\n\nconst contentReducer = (state = initialState, action) => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case GET_CONTENT_START: {\n      return payload;\n    }\n    case POST_CREATE: {\n      return [...state, payload];\n    }\n    case LIKE_ADD: {\n      return state.map(el => (el._id === payload._id ? payload : el));\n    }\n    case CREATE_COMMENT: {\n      const { text, autorId, postId } = payload;\n      return state.map(el =>\n        el._id == postId\n          ? { ...el, comments: [...el.comments, { text, autor: autorId }] }\n          : el\n      );\n    }\n    case CREATE_COMMENT_TO_COMMENT: {\n      console.log(\"ya tut\");\n      console.log(payload);\n      const comment = payload.data;\n      console.log(\"comment\", comment);\n      const mainId = payload.description.mainId;\n      console.log(\"mainId\", mainId);\n\n      return state.map(el =>\n        el._id == mainId\n          ? {\n              ...el,\n              comments: [\n                ...el.comments.map(el =>\n                  el == payload.description.commentId ? ({... el}) : el\n                ),\n              ],\n            }\n          : el\n      );\n    }\n    default:\n      return state;\n  }\n};\nexport default contentReducer;\n"]},"metadata":{},"sourceType":"module"}