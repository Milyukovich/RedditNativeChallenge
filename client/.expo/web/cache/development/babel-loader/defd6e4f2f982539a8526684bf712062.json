{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CREATE_COMMENT } from \"../types/comment\";\nvar ip = {\n  vlad: \"192.168.1.140\"\n};\n\nvar getCommentCreate = function getCommentCreate(payload) {\n  return {\n    type: CREATE_COMMENT,\n    payload: payload\n  };\n};\n\nexport var createComMain = function createComMain(description) {\n  return function _callee(dispatch) {\n    var response, comment;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"http://http://localhost/:8080/comment/add\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify(description)\n            }));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            comment = _context.sent;\n            dispatch(getCommentCreate(description));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/home/roman/elbruss/phase 3/finalproject/RedditNativeChallenge/client/src/redux/actions/comments.js"],"names":["CREATE_COMMENT","ip","vlad","getCommentCreate","payload","type","createComMain","description","dispatch","fetch","method","headers","body","JSON","stringify","response","json","comment"],"mappings":";AAAA,SAASA,cAAT;AACA,IAAMC,EAAE,GAAG;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAX;;AACA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,OAAO;AAAA,SAAK;AAAEC,IAAAA,IAAI,EAAEL,cAAR;AAAwBI,IAAAA,OAAO,EAAPA;AAAxB,GAAL;AAAA,CAAhC;;AACA,OAAO,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,WAAW;AAAA,SAAI,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACnBC,KAAK,8CAA8C;AACxEC,cAAAA,MAAM,EAAE,MADgE;AAExEC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAF+D;AAKxEC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,WAAf;AALkE,aAA9C,CADc;;AAAA;AACpCQ,YAAAA,QADoC;AAAA;AAAA,6CAQpBA,QAAQ,CAACC,IAAT,EARoB;;AAAA;AAQpCC,YAAAA,OARoC;AAU1CT,YAAAA,QAAQ,CAACL,gBAAgB,CAACI,WAAD,CAAjB,CAAR;;AAV0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAJ;AAAA,CAAjC","sourcesContent":["import { CREATE_COMMENT } from \"../types/comment\";\nconst ip = { vlad: \"192.168.1.140\" };\nconst getCommentCreate = payload => ({ type: CREATE_COMMENT, payload });\nexport const createComMain = description => async dispatch => {\n  const response = await fetch(`http://http://localhost/:8080/comment/add`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(description),\n  });\n  const comment = await response.json();\n\n  dispatch(getCommentCreate(description));\n};\n"]},"metadata":{},"sourceType":"module"}