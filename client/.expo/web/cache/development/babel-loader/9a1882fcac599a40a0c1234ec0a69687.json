{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport apiService from \"../../api/apiService\";\nimport { SEARCH_INIT } from \"../types/search\";\nexport var searchInit = function searchInit(_ref) {\n  var sesrchText = _ref.sesrchText,\n      searchTag = _ref.searchTag;\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(sesrchText, serarchTag);\n            apiService.post(\"http://localhost:8080/post\", {\n              sesrchText: sesrchText,\n              serarchTag: serarchTag\n            }).then(function (data) {\n              return dispatch({\n                type: SEARCH_INIT,\n                payload: data\n              });\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/Users/user/Documents/elbrus/phase 3/RedditNativeChallenge/client/src/redux/actions/search.js"],"names":["apiService","SEARCH_INIT","searchInit","sesrchText","searchTag","dispatch","console","log","serarchTag","post","then","data","type","payload"],"mappings":";AAAA,OAAOA,UAAP;AACA,SAASC,WAAT;AAEA,OAAO,IAAMC,UAAU,GACrB,SADWA,UACX;AAAA,MAAGC,UAAH,QAAGA,UAAH;AAAA,MAAeC,SAAf,QAAeA,SAAf;AAAA,SACA,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AACEC,YAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ,EAAwBK,UAAxB;AACAR,YAAAA,UAAU,CACPS,IADH,CACQ,4BADR,EACsC;AAAEN,cAAAA,UAAU,EAAVA,UAAF;AAAcK,cAAAA,UAAU,EAAVA;AAAd,aADtC,EAEGE,IAFH,CAEQ,UAAAC,IAAI;AAAA,qBAAIN,QAAQ,CAAC;AAAEO,gBAAAA,IAAI,EAAEX,WAAR;AAAqBY,gBAAAA,OAAO,EAAEF;AAA9B,eAAD,CAAZ;AAAA,aAFZ;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADA;AAAA,CADK","sourcesContent":["import apiService from \"../../api/apiService\";\nimport { SEARCH_INIT } from \"../types/search\";\n\nexport const searchInit =\n  ({ sesrchText, searchTag }) =>\n  async dispatch => {\n    console.log(sesrchText, serarchTag);\n    apiService\n      .post(\"http://localhost:8080/post\", { sesrchText, serarchTag })\n      .then(data => dispatch({ type: SEARCH_INIT, payload: data }));\n  };\n"]},"metadata":{},"sourceType":"module"}