{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CREATE_COMMENT, CREATE_COMMENT_TO_COMMENT } from \"../types/comment\";\nimport apiService from \"../../api/apiService\";\n\nvar getCommentCreate = function getCommentCreate(payload) {\n  return {\n    type: CREATE_COMMENT,\n    payload: payload\n  };\n};\n\nvar getComToComtCreate = function getComToComtCreate(payload) {\n  return {\n    type: CREATE_COMMENT_TO_COMMENT,\n    payload: payload\n  };\n};\n\nvar setLikeTo = function setLikeTo(currPost) {\n  return {\n    type: SET_LIKE_ADD,\n    payload: currPost\n  };\n};\n\nvar setDislike = function setDislike(currPost) {\n  return {\n    type: SET_DISLIKE_ADD,\n    payload: currPost\n  };\n};\n\nexport var createComMain = function createComMain(description) {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            apiService.post(\"/comment/add\", description).then(function (_ref) {\n              var data = _ref.data;\n              dispatch(getCommentCreate({\n                data: data,\n                description: description\n              }));\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var createComToCom = function createComToCom(description) {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            apiService.post(\"/comment/addcomtocom\", description).then(function (_ref2) {\n              var data = _ref2.data;\n              dispatch(getComToComtCreate({\n                data: data,\n                description: description\n              }));\n            });\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var addLike = function addLike(idUser, idPost) {\n  return function _callee3(dispatch) {\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            apiService.patch(\"/post/likes\", {\n              idUser: idUser,\n              idPost: idPost\n            }).then(function (_ref3) {\n              var data = _ref3.data;\n              return dispatch(setLike(data.currPost));\n            });\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var addDislike = function addDislike(idUser, idPost) {\n  return function _callee4(dispatch) {\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            apiService.patch(\"/post/dislikes\", {\n              idUser: idUser,\n              idPost: idPost\n            }).then(function (_ref4) {\n              var data = _ref4.data;\n              return dispatch(setDislike(data.currPost));\n            });\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/home/artur/elbrus/phase-3/ПРОЕКТВЕКА/copy/RedditNativeChallenge/client/src/redux/actions/comments.js"],"names":["CREATE_COMMENT","CREATE_COMMENT_TO_COMMENT","apiService","getCommentCreate","payload","type","getComToComtCreate","setLikeTo","currPost","SET_LIKE_ADD","setDislike","SET_DISLIKE_ADD","createComMain","description","dispatch","post","then","data","createComToCom","addLike","idUser","idPost","patch","setLike","addDislike"],"mappings":"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","sourcesContent":["import { CREATE_COMMENT, CREATE_COMMENT_TO_COMMENT } from \"../types/comment\";\nimport apiService from \"../../api/apiService\";\n\nconst getCommentCreate = payload => ({ type: CREATE_COMMENT, payload });\nconst getComToComtCreate = payload => ({\n  type: CREATE_COMMENT_TO_COMMENT,\n  payload,\n});\n\nconst setLikeTo = currPost => ({\n  type: SET_LIKE_ADD,\n  payload: currPost,\n});\nconst setDislike = currPost => ({\n  type: SET_DISLIKE_ADD,\n  payload: currPost,\n});\n\nexport const createComMain = description => async dispatch => {\n  apiService.post(\"/comment/add\", description).then(({ data }) => {\n    dispatch(getCommentCreate({ data, description }));\n  });\n};\n\nexport const createComToCom = description => async dispatch => {\n  apiService.post(\"/comment/addcomtocom\", description).then(({ data }) => {\n    // console.log(\"DATA\", data);\n    dispatch(getComToComtCreate({ data, description }));\n  });\n};\n\nexport const addLike = (idUser, idPost) => async dispatch => {\n  apiService\n    .patch(\"/post/likes\", { idUser, idPost })\n    .then(({ data }) => dispatch(setLike(data.currPost)));\n};\n\nexport const addDislike = (idUser, idPost) => async dispatch => {\n  apiService\n    .patch(\"/post/dislikes\", { idUser, idPost })\n    .then(({ data }) => dispatch(setDislike(data.currPost)));\n};\n"]},"metadata":{},"sourceType":"module"}