{
  "ast": null,
  "code": "import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport apiService from \"../../api/apiService\";\nimport { SEARCH_INIT } from \"../types/search\";\nvar host = \"http://localhost:8080\";\nexport var searchInit = function searchInit(sesrchText, searchTag) {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            apiService.post(\"host/search\", {\n              sesrchText: sesrchText,\n              searchTag: searchTag\n            }).then(function (res) {\n              return dispatch({\n                type: SEARCH_INIT,\n                payload: res.data\n              });\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};",
  "map": {
    "version": 3,
    "sources": [
      "/Users/user/Documents/elbrus/phase 3/RedditNativeChallenge/client/src/redux/actions/search.js"
    ],
    "names": [
      "apiService",
      "SEARCH_INIT",
      "host",
      "searchInit",
      "sesrchText",
      "searchTag",
      "dispatch",
      "post",
      "then",
      "res",
      "type",
      "payload",
      "data"
    ],
    "mappings": ";AAAA,OAAOA,UAAP;AACA,SAASC,WAAT;AAGA,IAAMC,IAAI,GAAG,uBAAb;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,UAAD,EAAaC,SAAb;AAAA,SAA2B,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AACnDN,YAAAA,UAAU,CACPO,IADH,gBACuB;AAAEH,cAAAA,UAAU,EAAVA,UAAF;AAAcC,cAAAA,SAAS,EAATA;AAAd,aADvB,EAEGG,IAFH,CAEQ,UAAAC,GAAG;AAAA,qBAAIH,QAAQ,CAAC;AAAEI,gBAAAA,IAAI,EAAET,WAAR;AAAqBU,gBAAAA,OAAO,EAAEF,GAAG,CAACG;AAAlC,eAAD,CAAZ;AAAA,aAFX;;AADmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;AAAA,CAAnB",
    "sourcesContent": [
      "import apiService from \"../../api/apiService\";\nimport { SEARCH_INIT } from \"../types/search\";\n\n//const host = \"http://192.168.1.140:8080\"; //vlad\nconst host = \"http://localhost:8080\"; //main\n\nexport const searchInit = (sesrchText, searchTag) => async dispatch => {\n  apiService\n    .post(`host/search`, { sesrchText, searchTag })\n    .then(res => dispatch({ type: SEARCH_INIT, payload: res.data }));\n};\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
