{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { GET_CONTENT_START, POST_CREATE } from \"../types/content\";\nimport { CREATE_COMMENT } from \"../types/comment\";\n\nvar contentReducer = function contentReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var type = action.type,\n      payload = action.payload;\n\n  switch (type) {\n    case GET_CONTENT_START:\n      {\n        return [].concat(_toConsumableArray(state), _toConsumableArray(payload));\n      }\n\n    case POST_CREATE:\n      {\n        return [].concat(_toConsumableArray(state), [payload]);\n      }\n\n    case CREATE_COMMENT:\n      {\n        var text = payload.text,\n            autorId = payload.autorId,\n            postId = payload.postId;\n        console.log(text);\n        console.log(postId);\n        return _toConsumableArray(state.map(function (el) {\n          return el._id == postId ? el.comments : _toConsumableArray(el.comments.push({\n            text: text,\n            creator: autorId\n          }));\n        }));\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default contentReducer;","map":{"version":3,"sources":["/home/roman/elbruss/phase 3/finalproject/RedditNativeChallenge/client/src/redux/reduce/contentReducer.js"],"names":["GET_CONTENT_START","POST_CREATE","CREATE_COMMENT","contentReducer","state","action","type","payload","text","autorId","postId","console","log","map","el","_id","comments","push","creator"],"mappings":";AAAA,SAASA,iBAAT,EAA4BC,WAA5B;AACA,SAASC,cAAT;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;AAC7C,MAAQC,IAAR,GAA0BD,MAA1B,CAAQC,IAAR;AAAA,MAAcC,OAAd,GAA0BF,MAA1B,CAAcE,OAAd;;AAEA,UAAQD,IAAR;AACE,SAAKN,iBAAL;AAAwB;AACtB,4CAAWI,KAAX,sBAAqBG,OAArB;AACD;;AACD,SAAKN,WAAL;AAAkB;AAChB,4CAAWG,KAAX,IAAkBG,OAAlB;AACD;;AACD,SAAKL,cAAL;AAAqB;AACnB,YAAQM,IAAR,GAAkCD,OAAlC,CAAQC,IAAR;AAAA,YAAcC,OAAd,GAAkCF,OAAlC,CAAcE,OAAd;AAAA,YAAuBC,MAAvB,GAAkCH,OAAlC,CAAuBG,MAAvB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,kCAAYN,KAAK,CAACS,GAAN,CAAU,UAAAC,EAAE;AAAA,iBAAGA,EAAE,CAACC,GAAH,IAAUL,MAAV,GAAmBI,EAAE,CAACE,QAAtB,sBAAqCF,EAAE,CAACE,QAAH,CAAYC,IAAZ,CAAiB;AAACT,YAAAA,IAAI,EAACA,IAAN;AAAWU,YAAAA,OAAO,EAACT;AAAnB,WAAjB,CAArC,CAAH;AAAA,SAAZ,CAAZ;AACD;;AACD;AACE,aAAOL,KAAP;AAdJ;AAgBD,CAnBD;;AAoBA,eAAeD,cAAf","sourcesContent":["import { GET_CONTENT_START, POST_CREATE } from \"../types/content\";\nimport { CREATE_COMMENT } from \"../types/comment\";\n\nconst contentReducer = (state = [], action) => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case GET_CONTENT_START: {\n      return [...state, ...payload];\n    }\n    case POST_CREATE: {\n      return [...state, payload];\n    }\n    case CREATE_COMMENT: {\n      const { text, autorId, postId } = payload;\n      console.log(text);\n      console.log(postId);\n      return [ ...state.map(el=> el._id == postId ? el.comments : [...el.comments.push({text:text,creator:autorId})]  )]\n    }\n    default:\n      return state;\n  }\n};\nexport default contentReducer;\n"]},"metadata":{},"sourceType":"module"}