{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport apiService from \"../../api/apiService\";\nimport { GET_CONTENT_START, POST_CREATE, SET_LIKE_ADD, SET_DISLIKE_ADD, EDIT_POST, DELETE_POST } from \"../types/content\";\n\nvar getContentStart = function getContentStart(payload) {\n  return {\n    type: GET_CONTENT_START,\n    payload: payload\n  };\n};\n\nvar getPostCreate = function getPostCreate(payload) {\n  return {\n    type: POST_CREATE,\n    payload: payload\n  };\n};\n\nvar setLike = function setLike(currPost) {\n  return {\n    type: SET_LIKE_ADD,\n    payload: currPost\n  };\n};\n\nvar setDislike = function setDislike(currPost) {\n  return {\n    type: SET_DISLIKE_ADD,\n    payload: currPost\n  };\n};\n\nexport var getContent = function getContent() {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            apiService.get(\"/post\").then(function (_ref) {\n              var data = _ref.data;\n              return dispatch(getContentStart(data.Posts));\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var createPost = function createPost(description) {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            apiService.post(\"/post/add\", description).then(function (_ref2) {\n              var data = _ref2.data;\n              return dispatch(getPostCreate(data));\n            });\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var addLike = function addLike(idUser, idPost) {\n  return function _callee3(dispatch) {\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            apiService.patch(\"/post/likes\", {\n              idUser: idUser,\n              idPost: idPost\n            }).then(function (_ref3) {\n              var data = _ref3.data;\n              return dispatch(setLike(data.currPost));\n            });\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var addDislike = function addDislike(idUser, idPost) {\n  return function _callee4(dispatch) {\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            apiService.patch(\"/post/dislikes\", {\n              idUser: idUser,\n              idPost: idPost\n            }).then(function (_ref4) {\n              var data = _ref4.data;\n              return dispatch(setDislike(data.currPost));\n            });\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var editPost = function editPost(post) {\n  return function _callee5(dispatch) {\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            apiService.patch('/post/edit', {\n              post: post\n            }).then(function (_ref5) {\n              var data = _ref5.data;\n              return dispatch();\n            });\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/Users/user/elbrus/PHASE 3/RedditNativeChallenge/client/src/redux/actions/content.js"],"names":["apiService","GET_CONTENT_START","POST_CREATE","SET_LIKE_ADD","SET_DISLIKE_ADD","EDIT_POST","DELETE_POST","getContentStart","payload","type","getPostCreate","setLike","currPost","setDislike","getContent","dispatch","get","then","data","Posts","createPost","description","post","addLike","idUser","idPost","patch","addDislike","editPost"],"mappings":"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","sourcesContent":["import apiService from \"../../api/apiService\";\nimport {\n  GET_CONTENT_START,\n  POST_CREATE,\n  SET_LIKE_ADD,\n  SET_DISLIKE_ADD,\n  EDIT_POST,\n  DELETE_POST,\n} from \"../types/content\";\n\nconst getContentStart = payload => ({ type: GET_CONTENT_START, payload });\nconst getPostCreate = payload => ({ type: POST_CREATE, payload });\n\nconst setLike = currPost => ({\n  type: SET_LIKE_ADD,\n  payload: currPost,\n});\nconst setDislike = currPost => ({\n  type: SET_DISLIKE_ADD,\n  payload: currPost,\n});\n\nexport const getContent = () => async dispatch => {\n  apiService\n    .get(\"/post\")\n    .then(({ data }) => dispatch(getContentStart(data.Posts)));\n};\n\nexport const createPost = description => async dispatch => {\n  apiService\n    .post(\"/post/add\", description)\n    .then(({ data }) => dispatch(getPostCreate(data)));\n};\n\nexport const addLike = (idUser, idPost) => async dispatch => {\n  apiService\n    .patch(\"/post/likes\", { idUser, idPost })\n    .then(({ data }) => dispatch(setLike(data.currPost)));\n};\n\nexport const addDislike = (idUser, idPost) => async dispatch => {\n  apiService\n    .patch(\"/post/dislikes\", { idUser, idPost })\n    .then(({ data }) => dispatch(setDislike(data.currPost)));\n};\n\nexport const editPost = post => async dispatch => {\n  apiService\n  .patch('/post/edit', {post})\n  .then(({data}) => dispatch())\n}\n\n"]},"metadata":{},"sourceType":"module"}