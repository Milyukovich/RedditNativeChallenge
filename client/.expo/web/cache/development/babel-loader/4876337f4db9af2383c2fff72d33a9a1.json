{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CREATE_COMMENT } from \"../types/comment\";\nimport apiService from \"../../api/apiService\";\n\nvar getCommentCreate = function getCommentCreate(payload) {\n  return {\n    type: CREATE_COMMENT,\n    payload: payload\n  };\n};\n\nexport var createComMain = function createComMain(description) {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            apiService.post(\"http://localhost:8080/comment/add\", description).then(function (_ref) {\n              var data = _ref.data;\n              return dispatch(getCommentCreate(description));\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var createComToCom = function createComToCom(description) {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            apiService.post(\"http://localhost:8080/comment/addcomtocom\", description);\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/home/roman/elbruss/phase 3/finalproject/RedditNativeChallenge/client/src/redux/actions/comments.js"],"names":["CREATE_COMMENT","apiService","getCommentCreate","payload","type","createComMain","description","dispatch","post","then","data","createComToCom"],"mappings":";AAAA,SAASA,cAAT;AACA,OAAOC,UAAP;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,OAAO;AAAA,SAAK;AAAEC,IAAAA,IAAI,EAAEJ,cAAR;AAAwBG,IAAAA,OAAO,EAAPA;AAAxB,GAAL;AAAA,CAAhC;;AACA,OAAO,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,WAAW;AAAA,SAAI,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAC1CN,YAAAA,UAAU,CACPO,IADH,CACQ,mCADR,EAC6CF,WAD7C,EAEGG,IAFH,CAEQ;AAAA,kBAAGC,IAAH,QAAGA,IAAH;AAAA,qBAAcH,QAAQ,CAACL,gBAAgB,CAACI,WAAD,CAAjB,CAAtB;AAAA,aAFR;;AAD0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAJ;AAAA,CAAjC;AAMP,OAAO,IAAMK,cAAc,GAAG,SAAjBA,cAAiB,CAAAL,WAAW;AAAA,SAAI,kBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAC3CN,YAAAA,UAAU,CAACO,IAAX,CAAgB,2CAAhB,EAA6DF,WAA7D;;AAD2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAJ;AAAA,CAAlC","sourcesContent":["import { CREATE_COMMENT } from \"../types/comment\";\nimport apiService from \"../../api/apiService\";\n\nconst getCommentCreate = payload => ({ type: CREATE_COMMENT, payload });\nexport const createComMain = description => async dispatch => {\n  apiService\n    .post(\"http://localhost:8080/comment/add\", description)\n    .then(({ data }) => dispatch(getCommentCreate(description)));\n};\n\nexport const createComToCom = description => async dispatch => {\n  apiService.post(\"http://localhost:8080/comment/addcomtocom\", description);\n  \n};\n"]},"metadata":{},"sourceType":"module"}