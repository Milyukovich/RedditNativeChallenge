{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { CREATE_COMMENT, CREATE_COMMENT_TO_COMMENT, SET_DISLIKE_TO_COMMENT, SET_LIKE_TO_COMMENT } from \"../types/comment\";\nvar initialState = [];\n\nvar commentReducer = function commentReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var type = action.type,\n      payload = action.payload;\n\n  switch (type) {\n    case CREATE_COMMENT:\n      {\n        console.log(9999, payload.description);\n        var postId = payload.description.postId;\n        console.log(1212, state.map(function (el) {\n          return el._id === postId ? _objectSpread(_objectSpread({}, el), {}, {\n            comments: [].concat(_toConsumableArray(el.comments), [_objectSpread({}, payload.data)])\n          }) : el;\n        }));\n        return state.map(function (el) {\n          return el._id === postId ? _objectSpread(_objectSpread({}, el), {}, {\n            comments: [].concat(_toConsumableArray(el.comments), [_objectSpread({}, payload.data)])\n          }) : el;\n        });\n      }\n\n    case CREATE_COMMENT_TO_COMMENT:\n      {\n        console.log(1, payload);\n        console.log(2, state);\n        return state.push(payload.data);\n      }\n\n    case SET_LIKE_TO_COMMENT:\n      {\n        console.log(\"payID\", payload);\n        return state.map(function (el) {\n          return el._id === payload._id ? payload : el;\n        });\n      }\n\n    case SET_DISLIKE_TO_COMMENT:\n      {\n        return state.map(function (el) {\n          return el._id === payload._id ? payload : el;\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default commentReducer;","map":{"version":3,"sources":["/home/artur/elbrus/phase-3/ПРОЕКТВЕКА/copy/RedditNativeChallenge/client/src/redux/reduce/commentReducer.js"],"names":["CREATE_COMMENT","CREATE_COMMENT_TO_COMMENT","SET_DISLIKE_TO_COMMENT","SET_LIKE_TO_COMMENT","initialState","commentReducer","state","action","type","payload","console","log","description","postId","map","el","_id","comments","data","push"],"mappings":";;;;;;;AAAA,SACEA,cADF,EAEEC,yBAFF,EAGEC,sBAHF,EAIEC,mBAJF;AAOA,IAAMC,YAAY,GAAG,EAArB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;AACvD,MAAQC,IAAR,GAA0BD,MAA1B,CAAQC,IAAR;AAAA,MAAcC,OAAd,GAA0BF,MAA1B,CAAcE,OAAd;;AAEA,UAAQD,IAAR;AACE,SAAKR,cAAL;AAAqB;AACnBU,QAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBF,OAAO,CAACG,WAA1B;AACA,YAAQC,MAAR,GAAmBJ,OAAO,CAACG,WAA3B,CAAQC,MAAR;AACAH,QAAAA,OAAO,CAACC,GAAR,CACE,IADF,EAEEL,KAAK,CAACQ,GAAN,CAAU,UAAAC,EAAE;AAAA,iBACVA,EAAE,CAACC,GAAH,KAAWH,MAAX,mCACSE,EADT;AACaE,YAAAA,QAAQ,+BAAMF,EAAE,CAACE,QAAT,sBAAwBR,OAAO,CAACS,IAAhC;AADrB,eAEIH,EAHM;AAAA,SAAZ,CAFF;AAQA,eAAOT,KAAK,CAACQ,GAAN,CAAU,UAAAC,EAAE;AAAA,iBACjBA,EAAE,CAACC,GAAH,KAAWH,MAAX,mCACSE,EADT;AACaE,YAAAA,QAAQ,+BAAMF,EAAE,CAACE,QAAT,sBAAwBR,OAAO,CAACS,IAAhC;AADrB,eAEIH,EAHa;AAAA,SAAZ,CAAP;AAKD;;AACD,SAAKd,yBAAL;AAAgC;AAC9BS,QAAAA,OAAO,CAACC,GAAR,CAAY,CAAZ,EAAeF,OAAf;AAEAC,QAAAA,OAAO,CAACC,GAAR,CAAY,CAAZ,EAAeL,KAAf;AACA,eAAOA,KAAK,CAACa,IAAN,CAAWV,OAAO,CAACS,IAAnB,CAAP;AACD;;AAED,SAAKf,mBAAL;AAA0B;AACxBO,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,OAArB;AACA,eAAOH,KAAK,CAACQ,GAAN,CAAU,UAAAC,EAAE;AAAA,iBAAKA,EAAE,CAACC,GAAH,KAAWP,OAAO,CAACO,GAAnB,GAAyBP,OAAzB,GAAmCM,EAAxC;AAAA,SAAZ,CAAP;AACD;;AAED,SAAKb,sBAAL;AAA6B;AAC3B,eAAOI,KAAK,CAACQ,GAAN,CAAU,UAAAC,EAAE;AAAA,iBAAKA,EAAE,CAACC,GAAH,KAAWP,OAAO,CAACO,GAAnB,GAAyBP,OAAzB,GAAmCM,EAAxC;AAAA,SAAZ,CAAP;AACD;;AAED;AACE,aAAOT,KAAP;AAnCJ;AAqCD,CAxCD;;AAyCA,eAAeD,cAAf","sourcesContent":["import {\n  CREATE_COMMENT,\n  CREATE_COMMENT_TO_COMMENT,\n  SET_DISLIKE_TO_COMMENT,\n  SET_LIKE_TO_COMMENT,\n} from \"../types/comment\";\n\nconst initialState = [];\n\nconst commentReducer = (state = initialState, action) => {\n  const { type, payload } = action;\n  // console.log(\"REDUCER PAYLOAD\", payload);\n  switch (type) {\n    case CREATE_COMMENT: {\n      console.log(9999, payload.description);\n      const { postId } = payload.description;\n      console.log(\n        1212,\n        state.map(el =>\n          el._id === postId\n            ? { ...el, comments: [...el.comments, { ...payload.data }] }\n            : el\n        )\n      );\n      return state.map(el =>\n        el._id === postId\n          ? { ...el, comments: [...el.comments, { ...payload.data }] }\n          : el\n      );\n    }\n    case CREATE_COMMENT_TO_COMMENT: {\n      console.log(1, payload);\n      // console.log(9999, payload.description.fathercomment);\n      console.log(2, state);\n      return state.push(payload.data);\n    }\n\n    case SET_LIKE_TO_COMMENT: {\n      console.log(\"payID\", payload);\n      return state.map(el => (el._id === payload._id ? payload : el));\n    }\n\n    case SET_DISLIKE_TO_COMMENT: {\n      return state.map(el => (el._id === payload._id ? payload : el));\n    }\n\n    default:\n      return state;\n  }\n};\nexport default commentReducer;\n"]},"metadata":{},"sourceType":"module"}