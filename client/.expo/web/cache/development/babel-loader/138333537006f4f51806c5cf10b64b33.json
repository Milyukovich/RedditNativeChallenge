{
  "ast": null,
  "code": "import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport apiService from \"../../api/apiService\";\nimport { GET_CONTENT_START, POST_CREATE, LIKE_ADD } from \"../types/content\";\n\nvar getContentStart = function getContentStart(payload) {\n  return {\n    type: GET_CONTENT_START,\n    payload: payload\n  };\n};\n\nvar getPostCreate = function getPostCreate(payload) {\n  return {\n    type: POST_CREATE,\n    payload: payload\n  };\n};\n\nvar setLike = cur;\nvar ip = {\n  vlad: \"192.168.1.140\"\n};\nexport var getContent = function getContent() {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            apiService.get(\"/post\").then(function (_ref) {\n              var data = _ref.data;\n              return dispatch(getContentStart(data.Posts));\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var createPost = function createPost(description) {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            apiService.post(\"/post/add\", description).then(function (_ref2) {\n              var data = _ref2.data;\n              return dispatch(getPostCreate(data));\n            });\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var addLike = function addLike(idUser, idPost) {\n  return function _callee3(dispatch) {\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            apiService.patch(\"/post/likes\", {\n              idUser: idUser,\n              idPost: idPost\n            }).then(function (_ref3) {\n              var data = _ref3.data;\n              return dispatch({\n                type: LIKE_ADD,\n                payload: data.currPost\n              });\n            });\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var addDislike = function addDislike(idUser, idPost) {\n  return function _callee4(dispatch) {\n    var response, res, currPost;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"http://localhost:8080/post/likes\", {\n              method: \"PATCH\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                idUser: idUser,\n                idPost: idPost\n              })\n            }));\n\n          case 2:\n            response = _context4.sent;\n            _context4.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            res = _context4.sent;\n            currPost = res.currPost;\n            return _context4.abrupt(\"return\", dispatch({\n              type: LIKE_ADD,\n              payload: currPost\n            }));\n\n          case 8:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};",
  "map": {
    "version": 3,
    "sources": [
      "/home/artur/elbrus/phase-3/RedditNativeChallenge/client/src/redux/actions/content.js"
    ],
    "names": [
      "apiService",
      "GET_CONTENT_START",
      "POST_CREATE",
      "LIKE_ADD",
      "getContentStart",
      "payload",
      "type",
      "getPostCreate",
      "setLike",
      "cur",
      "ip",
      "vlad",
      "getContent",
      "dispatch",
      "get",
      "then",
      "data",
      "Posts",
      "createPost",
      "description",
      "post",
      "addLike",
      "idUser",
      "idPost",
      "patch",
      "currPost",
      "addDislike",
      "fetch",
      "method",
      "headers",
      "body",
      "JSON",
      "stringify",
      "response",
      "json",
      "res"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import apiService from \"../../api/apiService\";\nimport { GET_CONTENT_START, POST_CREATE, LIKE_ADD } from \"../types/content\";\n\nconst getContentStart = payload => ({ type: GET_CONTENT_START, payload });\nconst getPostCreate = payload => ({ type: POST_CREATE, payload });\nconst setLike = cur\n\nconst ip = { vlad: \"192.168.1.140\" };\n\nexport const getContent = () => async dispatch => {\n  apiService\n    .get(\"/post\")\n    .then(({ data }) => dispatch(getContentStart(data.Posts)));\n};\n\nexport const createPost = description => async dispatch => {\n  apiService\n    .post(\"/post/add\", description)\n    .then(({ data }) => dispatch(getPostCreate(data)));\n};\n\nexport const addLike = (idUser, idPost) => async dispatch => {\n  apiService.patch(\"/post/likes\", { idUser, idPost }).then(({ data }) =>\n    dispatch({\n      type: LIKE_ADD,\n      payload: data.currPost,\n    })\n  );\n\n  // const response = await fetch(\"http://localhost:8080/post/likes\", {\n  //   method: \"PATCH\",\n  //   headers: {\n  //     \"Content-Type\": \"application/json\",\n  //   },\n  //   body: JSON.stringify({ idUser, idPost }),\n  // });\n  // const res = await response.json();\n  // const { currPost } = res;\n  // return dispatch({\n  //   type: LIKE_ADD,\n  //   payload: currPost,\n  // });\n};\n\nexport const addDislike = (idUser, idPost) => async dispatch => {\n  const response = await fetch(\"http://localhost:8080/post/likes\", {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ idUser, idPost }),\n  });\n  const res = await response.json();\n  const { currPost } = res;\n  return dispatch({\n    type: LIKE_ADD,\n    payload: currPost,\n  });\n};\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
