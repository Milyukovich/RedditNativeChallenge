{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from \"axios\";\nimport deviceStorage from \"../asyncStorage\";\nimport { userPersistConfig } from \"../redux/reduce/userReducer\";\nimport { refreshToken as apiRefreshToken } from \"./auth\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nvar apiService = axios.create({\n  baseURL: \"http://localhost:8080\"\n});\n\nvar parsePersistedState = function parsePersistedState(state) {\n  return Object.keys(state).reduce(function (acc, key) {\n    return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, JSON.parse(state[key])));\n  }, {});\n};\n\napiService.interceptors.request.use(function _callee(config) {\n  var userStateString, accessToken, _parsePersistedState, _parsePersistedState$;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(deviceStorage.getItem(\"persist:user\"));\n\n        case 2:\n          userStateString = _context.sent;\n          accessToken = null;\n\n          if (userStateString) {\n            accessToken = (_parsePersistedState = parsePersistedState(userStateString)) == null ? void 0 : (_parsePersistedState$ = _parsePersistedState.jwt) == null ? void 0 : _parsePersistedState$.access;\n            console.log(parsePersistedState(userStateString));\n          }\n\n          if (accessToken) {\n            config.headers[\"authorization\"] = \"Bearer \" + accessToken;\n          }\n\n          return _context.abrupt(\"return\", config);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}, function (error) {\n  return Promise.reject(error);\n});\napiService.interceptors.response.use(function (response) {\n  return response;\n}, function _callee2(error) {\n  var originalRequest, userStateString, refreshToken, userState, _userState$jwt;\n\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          originalRequest = error.config;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(deviceStorage.getItem(\"persist:user\"));\n\n        case 3:\n          userStateString = _context2.sent;\n          refreshToken = null;\n          userState = parsePersistedState(userStateString);\n\n          if (userStateString) {\n            refreshToken = userState == null ? void 0 : (_userState$jwt = userState.jwt) == null ? void 0 : _userState$jwt.refresh;\n          }\n\n          if (!(refreshToken && error.response.status === 401 && !originalRequest._retry)) {\n            _context2.next = 10;\n            break;\n          }\n\n          originalRequest._retry = true;\n          return _context2.abrupt(\"return\", apiRefreshToken(refreshToken).then(function (response) {\n            if (response.status === 200) {\n              deviceStorage.mergeItem(\"user\", _objectSpread(_objectSpread({}, userState), {}, {\n                jwt: _objectSpread(_objectSpread({}, userState.jwt), {}, {\n                  access: response.data.accessToken\n                })\n              }));\n              return apiService(originalRequest);\n            }\n          }));\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});\nexport default apiService;","map":{"version":3,"sources":["/Users/user/Documents/elbrus/phase 3/RedditNativeChallenge/client/src/api/apiService.js"],"names":["axios","deviceStorage","userPersistConfig","refreshToken","apiRefreshToken","AsyncStorage","apiService","create","baseURL","parsePersistedState","state","Object","keys","reduce","acc","key","JSON","parse","interceptors","request","use","config","getItem","userStateString","accessToken","jwt","access","console","log","headers","error","Promise","reject","response","originalRequest","userState","refresh","status","_retry","then","mergeItem","data"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport deviceStorage from \"../asyncStorage\";\nimport { userPersistConfig } from \"../redux/reduce/userReducer\";\nimport { refreshToken as apiRefreshToken } from \"./auth\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nconst apiService = axios.create({\n  baseURL: \"http://localhost:8080\",\n});\n\nconst parsePersistedState = state =>\n  Object.keys(state).reduce(\n    (acc, key) => ({\n      ...acc,\n      [key]: JSON.parse(state[key]),\n    }),\n    {}\n  );\n\napiService.interceptors.request.use(\n  async config => {\n    const userStateString = await deviceStorage.getItem(\"persist:user\");\n\n    let accessToken = null;\n\n    if (userStateString) {\n      accessToken = parsePersistedState(userStateString)?.jwt?.access;\n      console.log(parsePersistedState(userStateString));\n    }\n    if (accessToken) {\n      config.headers[\"authorization\"] = `Bearer ${accessToken}`;\n    }\n    return config;\n  },\n  error => Promise.reject(error)\n);\n\napiService.interceptors.response.use(\n  response => response,\n  async error => {\n    const originalRequest = error.config;\n\n    const userStateString = await deviceStorage.getItem(\"persist:user\");\n    let refreshToken = null;\n    const userState = parsePersistedState(userStateString);\n    if (userStateString) {\n      refreshToken = userState?.jwt?.refresh;\n    }\n\n    if (\n      refreshToken &&\n      error.response.status === 401 &&\n      !originalRequest._retry\n    ) {\n      originalRequest._retry = true;\n      return apiRefreshToken(refreshToken).then(response => {\n        if (response.status === 200) {\n          deviceStorage.mergeItem(\"user\", {\n            ...userState,\n            jwt: { ...userState.jwt, access: response.data.accessToken },\n          });\n          return apiService(originalRequest);\n        }\n      });\n    }\n  }\n);\n\nexport default apiService;\n"]},"metadata":{},"sourceType":"module"}