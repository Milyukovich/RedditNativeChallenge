{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { CREATE_COMMENT, CREATE_COMMENT_TO_COMMENT, SET_DISLIKE_TO_COMMENT, SET_LIKE_TO_COMMENT } from \"../types/comment\";\nvar initialState = [];\n\nvar commentReducer = function commentReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var type = action.type,\n      payload = action.payload;\n\n  switch (type) {\n    case CREATE_COMMENT:\n      {\n        var postId = payload.description.postId;\n        return state.map(function (el) {\n          return el._id === postId ? _objectSpread(_objectSpread({}, el), {}, {\n            comments: [].concat(_toConsumableArray(el.comments), [_objectSpread({}, payload.data)])\n          }) : el;\n        });\n      }\n\n    case CREATE_COMMENT_TO_COMMENT:\n      {\n        console.log(1, payload);\n        console.log(2, state);\n        return state.push(payload.data);\n      }\n\n    case SET_LIKE_TO_COMMENT:\n      {\n        var comment = payload.data;\n        console.log(1, payload);\n        var mainId = payload.description.mainId;\n        return state.map(function (el) {\n          return el._id === mainId ? _objectSpread(_objectSpread({}, el), {}, {\n            comments: _toConsumableArray(el.comments.map(function (el) {\n              return el._id == payload.description.commentId ? _objectSpread(_objectSpread({}, el), {}, {\n                comments: [].concat(_toConsumableArray(el.comments), [comment])\n              }) : el;\n            }))\n          }) : el;\n        });\n      }\n\n    case SET_LIKE_ADD:\n      {\n        return state.map(function (el) {\n          return el._id === payload._id ? payload : el;\n        });\n      }\n\n    case SET_DISLIKE_ADD:\n      {\n        return state.map(function (el) {\n          return el._id === payload._id ? payload : el;\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default commentReducer;","map":{"version":3,"sources":["/home/artur/elbrus/phase-3/ПРОЕКТВЕКА/copy/RedditNativeChallenge/client/src/redux/reduce/commentReducer.js"],"names":["CREATE_COMMENT","CREATE_COMMENT_TO_COMMENT","SET_DISLIKE_TO_COMMENT","SET_LIKE_TO_COMMENT","initialState","commentReducer","state","action","type","payload","postId","description","map","el","_id","comments","data","console","log","push","comment","mainId","commentId","SET_LIKE_ADD","SET_DISLIKE_ADD"],"mappings":";;;;;;;AAAA,SACEA,cADF,EAEEC,yBAFF,EAGEC,sBAHF,EAIEC,mBAJF;AAOA,IAAMC,YAAY,GAAG,EAArB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;AACvD,MAAQC,IAAR,GAA0BD,MAA1B,CAAQC,IAAR;AAAA,MAAcC,OAAd,GAA0BF,MAA1B,CAAcE,OAAd;;AAEA,UAAQD,IAAR;AACE,SAAKR,cAAL;AAAqB;AACnB,YAAQU,MAAR,GAAmBD,OAAO,CAACE,WAA3B,CAAQD,MAAR;AACA,eAAOJ,KAAK,CAACM,GAAN,CAAU,UAAAC,EAAE;AAAA,iBACjBA,EAAE,CAACC,GAAH,KAAWJ,MAAX,mCACSG,EADT;AACaE,YAAAA,QAAQ,+BAAMF,EAAE,CAACE,QAAT,sBAAwBN,OAAO,CAACO,IAAhC;AADrB,eAEIH,EAHa;AAAA,SAAZ,CAAP;AAKD;;AACD,SAAKZ,yBAAL;AAAgC;AAC9BgB,QAAAA,OAAO,CAACC,GAAR,CAAY,CAAZ,EAAeT,OAAf;AAEAQ,QAAAA,OAAO,CAACC,GAAR,CAAY,CAAZ,EAAeZ,KAAf;AACA,eAAOA,KAAK,CAACa,IAAN,CAAWV,OAAO,CAACO,IAAnB,CAAP;AACD;;AAED,SAAKb,mBAAL;AAA0B;AACxB,YAAMiB,OAAO,GAAGX,OAAO,CAACO,IAAxB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,CAAZ,EAAeT,OAAf;AACA,YAAMY,MAAM,GAAGZ,OAAO,CAACE,WAAR,CAAoBU,MAAnC;AAEA,eAAOf,KAAK,CAACM,GAAN,CAAU,UAAAC,EAAE;AAAA,iBACjBA,EAAE,CAACC,GAAH,KAAWO,MAAX,mCAESR,EAFT;AAGME,YAAAA,QAAQ,qBACHF,EAAE,CAACE,QAAH,CAAYH,GAAZ,CAAgB,UAAAC,EAAE;AAAA,qBACnBA,EAAE,CAACC,GAAH,IAAUL,OAAO,CAACE,WAAR,CAAoBW,SAA9B,mCAEST,EAFT;AAGME,gBAAAA,QAAQ,+BAAMF,EAAE,CAACE,QAAT,IAAmBK,OAAnB;AAHd,mBAKIP,EANe;AAAA,aAAlB,CADG;AAHd,eAcIA,EAfa;AAAA,SAAZ,CAAP;AAiBD;;AACD,SAAKU,YAAL;AAAmB;AACjB,eAAOjB,KAAK,CAACM,GAAN,CAAU,UAAAC,EAAE;AAAA,iBAAKA,EAAE,CAACC,GAAH,KAAWL,OAAO,CAACK,GAAnB,GAAyBL,OAAzB,GAAmCI,EAAxC;AAAA,SAAZ,CAAP;AACD;;AAED,SAAKW,eAAL;AAAsB;AACpB,eAAOlB,KAAK,CAACM,GAAN,CAAU,UAAAC,EAAE;AAAA,iBAAKA,EAAE,CAACC,GAAH,KAAWL,OAAO,CAACK,GAAnB,GAAyBL,OAAzB,GAAmCI,EAAxC;AAAA,SAAZ,CAAP;AACD;;AAGD;AACE,aAAOP,KAAP;AAjDJ;AAmDD,CAtDD;;AAuDA,eAAeD,cAAf","sourcesContent":["import {\n  CREATE_COMMENT,\n  CREATE_COMMENT_TO_COMMENT,\n  SET_DISLIKE_TO_COMMENT,\n  SET_LIKE_TO_COMMENT,\n} from \"../types/comment\";\n\nconst initialState = [];\n\nconst commentReducer = (state = initialState, action) => {\n  const { type, payload } = action;\n  // console.log(\"REDUCER PAYLOAD\", payload);\n  switch (type) {\n    case CREATE_COMMENT: {\n      const { postId } = payload.description;\n      return state.map(el =>\n        el._id === postId\n          ? { ...el, comments: [...el.comments, { ...payload.data }] }\n          : el\n      );\n    }\n    case CREATE_COMMENT_TO_COMMENT: {\n      console.log(1, payload);\n\n      console.log(2, state);\n      return state.push(payload.data);\n    }\n\n    case SET_LIKE_TO_COMMENT: {\n      const comment = payload.data;\n      console.log(1, payload);\n      const mainId = payload.description.mainId;\n      // console.log(2, mainId);\n      return state.map(el =>\n        el._id === mainId\n          ? {\n              ...el,\n              comments: [\n                ...el.comments.map(el =>\n                  el._id == payload.description.commentId\n                    ? {\n                        ...el,\n                        comments: [...el.comments, comment],\n                      }\n                    : el\n                ),\n              ],\n            }\n          : el\n      );\n    }\n    case SET_LIKE_ADD: {\n      return state.map(el => (el._id === payload._id ? payload : el));\n    }\n\n    case SET_DISLIKE_ADD: {\n      return state.map(el => (el._id === payload._id ? payload : el));\n    }\n    \n\n    default:\n      return state;\n  }\n};\nexport default commentReducer;\n"]},"metadata":{},"sourceType":"module"}