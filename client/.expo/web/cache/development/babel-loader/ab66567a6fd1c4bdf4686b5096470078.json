{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/user/elbrus/PHASE 3/RedditNativeChallenge/client/src/components/EditPostForm/EditPostForm.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { editPost } from \"../../redux/actions/content\";\nexport default function EditPost(_ref) {\n  var route = _ref.route;\n  var navigation = useNavigation();\n  var data = route.params.data;\n  var dispatch = useDispatch();\n\n  var _useState = useState(data.title),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputTitle = _useState2[0],\n      setInputTitle = _useState2[1];\n\n  var _useState3 = useState(data.description),\n      _useState4 = _slicedToArray(_useState3, 2),\n      inputDescription = _useState4[0],\n      setInputDescription = _useState4[1];\n\n  var editPostFunction = function editPostFunction(id) {\n    if (inputTitle.trim() && inputDescription.trim()) {\n      var post = {\n        _id: data._id,\n        title: inputTitle,\n        description: inputDescription\n      };\n      dispatch(editPost(post));\n    }\n  };\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 10\n    }\n  }, React.createElement(TextInput, {\n    onChangeText: function onChangeText(text) {\n      return setInputTitle(text);\n    },\n    value: inputTitle,\n    placeholder: data.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, React.createElement(TextInput, {\n    onChangeText: function onChangeText(text) {\n      return setInputDescription(text);\n    },\n    value: inputDescription,\n    style: {\n      marginBottom: 10\n    },\n    placeholder: data.description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  })), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return editPostFunction(data._id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.updateText,\n    onPress: function onPress() {\n      navigation.navigate(\"EditPost\", {\n        data: el\n      });\n      setVisible(function (prev) {\n        return !prev;\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }, \"Update\")));\n}\nvar styles = StyleSheet.create({\n  updateText: {\n    color: \"white\"\n  }\n});","map":{"version":3,"sources":["/Users/user/elbrus/PHASE 3/RedditNativeChallenge/client/src/components/EditPostForm/EditPostForm.jsx"],"names":["React","useEffect","useState","useNavigation","useDispatch","useSelector","editPost","EditPost","route","navigation","data","params","dispatch","title","inputTitle","setInputTitle","description","inputDescription","setInputDescription","editPostFunction","id","trim","post","_id","text","marginBottom","styles","updateText","navigate","el","setVisible","prev","StyleSheet","create","color"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;;;;;AAEA,SAASC,QAAT;AAEA,eAAe,SAASC,QAAT,OAA6B;AAAA,MAATC,KAAS,QAATA,KAAS;AAC1C,MAAMC,UAAU,GAAGN,aAAa,EAAhC;AACA,MAAQO,IAAR,GAAiBF,KAAK,CAACG,MAAvB,CAAQD,IAAR;AACA,MAAME,QAAQ,GAAGR,WAAW,EAA5B;;AACA,kBAAoCF,QAAQ,CAACQ,IAAI,CAACG,KAAN,CAA5C;AAAA;AAAA,MAAOC,UAAP;AAAA,MAAmBC,aAAnB;;AACA,mBAAgDb,QAAQ,CAACQ,IAAI,CAACM,WAAN,CAAxD;AAAA;AAAA,MAAOC,gBAAP;AAAA,MAAyBC,mBAAzB;;AAEA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,EAAE,EAAI;AAC7B,QAAIN,UAAU,CAACO,IAAX,MAAqBJ,gBAAgB,CAACI,IAAjB,EAAzB,EAAkD;AAChD,UAAMC,IAAI,GAAG;AACXC,QAAAA,GAAG,EAAEb,IAAI,CAACa,GADC;AAEXV,QAAAA,KAAK,EAAEC,UAFI;AAGXE,QAAAA,WAAW,EAAEC;AAHF,OAAb;AAKAL,MAAAA,QAAQ,CAACN,QAAQ,CAACgB,IAAD,CAAT,CAAR;AACD;AACF,GATD;;AAWA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACD,oBAAC,SAAD;AAAW,IAAA,YAAY,EAAE,sBAAAE,IAAI;AAAA,aAAIT,aAAa,CAACS,IAAD,CAAjB;AAAA,KAA7B;AAAsD,IAAA,KAAK,EAAEV,UAA7D;AAAyE,IAAA,WAAW,EAAEJ,IAAI,CAACG,KAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADC,CADL,EAKI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AAAW,IAAA,YAAY,EAAE,sBAAAW,IAAI;AAAA,aAAIN,mBAAmB,CAACM,IAAD,CAAvB;AAAA,KAA7B;AAA4D,IAAA,KAAK,EAAEP,gBAAnE;AAAqF,IAAA,KAAK,EAAE;AAAEQ,MAAAA,YAAY,EAAE;AAAhB,KAA5F;AACE,IAAA,WAAW,EAAEf,IAAI,CAACM,WADpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CALJ,EASI,oBAAC,gBAAD;AACE,IAAA,OAAO,EAAE;AAAA,aAAMG,gBAAgB,CAACT,IAAI,CAACa,GAAN,CAAtB;AAAA,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEG,MAAM,CAACC,UAApB;AACM,IAAA,OAAO,EAAE,mBAAM;AACflB,MAAAA,UAAU,CAACmB,QAAX,CAAoB,UAApB,EAAgC;AAAElB,QAAAA,IAAI,EAAEmB;AAAR,OAAhC;AACEC,MAAAA,UAAU,CAAC,UAAAC,IAAI;AAAA,eAAI,CAACA,IAAL;AAAA,OAAL,CAAV;AACD,KAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,CATJ,CADF;AAqBD;AAED,IAAML,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAC/BN,EAAAA,UAAU,EAAE;AACVO,IAAAA,KAAK,EAAE;AADG;AADmB,CAAlB,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { StyleSheet, View, Text, TouchableOpacity, TextInput } from \"react-native\";\nimport { editPost } from \"../../redux/actions/content\";\n\nexport default function EditPost({ route }) {\n  const navigation = useNavigation();\n  const { data } = route.params;\n  const dispatch = useDispatch();\n  const [inputTitle, setInputTitle] = useState(data.title);\n  const [inputDescription, setInputDescription] = useState(data.description);\n\n  const editPostFunction = id => {\n    if (inputTitle.trim() && inputDescription.trim()) {\n      const post = {\n        _id: data._id,\n        title: inputTitle,\n        description: inputDescription,\n      };\n      dispatch(editPost(post));\n    }\n  };\n\n  return (\n    <View>\n         <View>\n        <TextInput onChangeText={text => setInputTitle(text)} value={inputTitle} placeholder={data.title} />\n         </View>\n         \n        <View>\n          <TextInput onChangeText={text => setInputDescription(text)} value={inputDescription} style={{ marginBottom: 10 }}\n            placeholder={data.description}></TextInput>\n        </View>\n        <TouchableOpacity\n          onPress={() => editPostFunction(data._id)}\n        >\n          <Text style={styles.updateText} \n                onPress={() => {\n                navigation.navigate(\"EditPost\", { data: el });\n                  setVisible(prev => !prev);\n                }}>Update</Text>\n        </TouchableOpacity>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  updateText: {\n    color: \"white\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}