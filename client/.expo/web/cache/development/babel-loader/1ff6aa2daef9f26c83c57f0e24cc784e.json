{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/user/elbrus/PHASE 3/RedditNativeChallenge/client/src/components/EditPostForm/EditPostForm.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { editPost } from \"../../redux/actions/content\";\nimport { useNavigation } from \"@react-navigation/native\";\nexport default function EditPost(_ref) {\n  var route = _ref.route;\n  var data = route.params.data;\n  var dispatch = useDispatch();\n\n  var _useState = useState(data.title),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputTitle = _useState2[0],\n      setInputTitle = _useState2[1];\n\n  var _useState3 = useState(data.description),\n      _useState4 = _slicedToArray(_useState3, 2),\n      inputDescription = _useState4[0],\n      setInputDescription = _useState4[1];\n\n  var navigation = useNavigation();\n\n  var editPostFunction = function editPostFunction(id) {\n    if (inputTitle.trim() && inputDescription.trim()) {\n      var post = {\n        _id: data._id,\n        title: inputTitle,\n        description: inputDescription\n      };\n      dispatch(editPost(post));\n    }\n\n    navigation.navigate(\"MainPage\");\n  };\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 10\n    }\n  }, React.createElement(TextInput, {\n    onChangeText: function onChangeText(text) {\n      return setInputTitle(text);\n    },\n    value: inputTitle,\n    placeholder: data.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, React.createElement(TextInput, {\n    onChangeText: function onChangeText(text) {\n      return setInputDescription(text);\n    },\n    value: inputDescription,\n    style: {\n      marginBottom: 10\n    },\n    placeholder: data.description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  })), React.createElement(TouchableOpacity, {\n    style: [styles.buttonContainer, styles.updateButton],\n    onPress: function onPress() {\n      return editPostFunction(data._id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.updateText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }, \"Update\")));\n}\nvar styles = StyleSheet.create({\n  icons: {\n    flex: 1,\n    flexDirection: \"row\",\n    justifyContent: \"center\"\n  },\n  buttonContainer: {\n    height: 45,\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginBottom: 20,\n    width: 300,\n    borderRadius: 30,\n    backgroundColor: \"transparent\"\n  },\n  updateButton: {\n    backgroundColor: \"#00b5ec\",\n    shadowColor: \"#808080\",\n    shadowOffset: {\n      width: 0,\n      height: 9\n    },\n    shadowOpacity: 0.5,\n    shadowRadius: 12.35,\n    elevation: 19\n  },\n  updateText: {\n    color: \"white\"\n  }\n});","map":{"version":3,"sources":["/Users/user/elbrus/PHASE 3/RedditNativeChallenge/client/src/components/EditPostForm/EditPostForm.jsx"],"names":["React","useEffect","useState","useDispatch","useSelector","editPost","useNavigation","EditPost","route","data","params","dispatch","title","inputTitle","setInputTitle","description","inputDescription","setInputDescription","navigation","editPostFunction","id","trim","post","_id","navigate","text","marginBottom","styles","buttonContainer","updateButton","updateText","StyleSheet","create","icons","flex","flexDirection","justifyContent","height","alignItems","width","borderRadius","backgroundColor","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","color"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { StyleSheet, View, Text, TouchableOpacity, TextInput } from \"react-native\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { editPost } from \"../../redux/actions/content\";\nimport { useNavigation } from \"@react-navigation/native\";\n\nexport default function EditPost({ route }) {\n  const { data } = route.params;\n  const dispatch = useDispatch();\n  const [inputTitle, setInputTitle] = useState(data.title);\n  const [inputDescription, setInputDescription] = useState(data.description);\n  const navigation = useNavigation();\n\n  const editPostFunction = id => {\n    if (inputTitle.trim() && inputDescription.trim()) {\n      const post = {\n        _id: data._id,\n        title: inputTitle,\n        description: inputDescription,\n      };\n      dispatch(editPost(post));\n    }\n    navigation.navigate(\"MainPage\")\n  };\n\n  return (\n    <View>\n         <View>\n        <TextInput onChangeText={text => setInputTitle(text)} value={inputTitle} placeholder={data.title}/>\n        </View>\n        <View>\n          <TextInput onChangeText={text => setInputDescription(text)} value={inputDescription} style={{ marginBottom: 10 }}\n            placeholder={data.description}></TextInput>\n        </View>\n        <TouchableOpacity\n          style={[styles.buttonContainer, styles.updateButton]}\n          onPress={() => editPostFunction(data._id)}\n        >\n          <Text style={styles.updateText}>Update</Text>\n        </TouchableOpacity>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  icons: {\n    flex: 1,\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n  },\n  buttonContainer: {\n    height: 45,\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginBottom: 20,\n    width: 300,\n    borderRadius: 30,\n    backgroundColor: \"transparent\",\n  },\n  updateButton: {\n    backgroundColor: \"#00b5ec\",\n\n    shadowColor: \"#808080\",\n    shadowOffset: {\n      width: 0,\n      height: 9,\n    },\n    shadowOpacity: 0.5,\n    shadowRadius: 12.35,\n\n    elevation: 19,\n  },\n  updateText: {\n    color: \"white\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}