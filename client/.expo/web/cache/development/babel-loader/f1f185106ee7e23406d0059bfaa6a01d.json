{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GET_CONTENT_START, POST_CREATE, SET_LIKE_ADD, SET_DISLIKE_ADD, CREATE_COMMENT, CREATE_COMMENT_TO_COMMENT, EDIT_POST, DELETE_POST, SET_DISLIKE_TO_COMMENT } from \"../types/content\";\nvar initialState = [];\n\nvar contentReducer = function contentReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var type = action.type,\n      payload = action.payload;\n\n  switch (type) {\n    case GET_CONTENT_START:\n      {\n        return payload;\n      }\n\n    case POST_CREATE:\n      {\n        return [].concat(_toConsumableArray(state), [payload]);\n      }\n\n    case SET_LIKE_ADD:\n      {\n        return state.map(function (el) {\n          return el._id === payload._id ? payload : el;\n        });\n      }\n\n    case SET_DISLIKE_ADD:\n      {\n        return state.map(function (el) {\n          return el._id === payload._id ? payload : el;\n        });\n      }\n\n    case CREATE_COMMENT:\n      {\n        var postId = payload.description.postId;\n        return state.map(function (el) {\n          return el._id === postId ? _objectSpread(_objectSpread({}, el), {}, {\n            comments: [].concat(_toConsumableArray(el.comments), [_objectSpread({}, payload.data)])\n          }) : el;\n        });\n      }\n\n    case CREATE_COMMENT_TO_COMMENT:\n      {\n        var comment = payload.data;\n        console.log(1, payload);\n        var mainId = payload.description.mainId;\n        return state.map(function (el) {\n          return el._id === mainId ? _objectSpread(_objectSpread({}, el), {}, {\n            comments: _toConsumableArray(el.comments.map(function (el) {\n              return el._id == payload.description.commentId ? _objectSpread(_objectSpread({}, el), {}, {\n                comments: [].concat(_toConsumableArray(el.comments), [comment])\n              }) : el;\n            }))\n          }) : el;\n        });\n      }\n\n    case EDIT_POST:\n      {\n        var newState = state.map(function (el) {\n          return el._id === payload._id ? payload : el;\n        });\n        return newState;\n      }\n\n    case DELETE_POST:\n      {\n        var id = payload.id;\n        var newPostState = state.filter(function (el) {\n          return el._id !== id;\n        });\n        return newPostState;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default contentReducer;","map":{"version":3,"sources":["/home/artur/elbrus/phase-3/ПРОЕКТВЕКА/copy/RedditNativeChallenge/client/src/redux/reduce/contentReducer.js"],"names":["GET_CONTENT_START","POST_CREATE","SET_LIKE_ADD","SET_DISLIKE_ADD","CREATE_COMMENT","CREATE_COMMENT_TO_COMMENT","EDIT_POST","DELETE_POST","SET_DISLIKE_TO_COMMENT","initialState","contentReducer","state","action","type","payload","map","el","_id","postId","description","comments","data","comment","console","log","mainId","commentId","newState","id","newPostState","filter"],"mappings":"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","sourcesContent":["import {\n  GET_CONTENT_START,\n  POST_CREATE,\n  SET_LIKE_ADD,\n  SET_DISLIKE_ADD,\n  CREATE_COMMENT,\n  CREATE_COMMENT_TO_COMMENT,\n  EDIT_POST,\n  DELETE_POST,\n  SET_DISLIKE_TO_COMMENT,\n} from \"../types/content\";\n\nconst initialState = [];\n\nconst contentReducer = (state = initialState, action) => {\n  const { type, payload } = action;\n  // console.log(\"REDUCER PAYLOAD\", payload);\n  switch (type) {\n    case GET_CONTENT_START: {\n      return payload;\n    }\n    case POST_CREATE: {\n      return [...state, payload];\n    }\n    case SET_LIKE_ADD: {\n      return state.map(el => (el._id === payload._id ? payload : el));\n    }\n\n    case SET_DISLIKE_ADD: {\n      return state.map(el => (el._id === payload._id ? payload : el));\n    }\n\n    case CREATE_COMMENT: {\n      const { postId } = payload.description;\n      return state.map(el =>\n        el._id === postId\n          ? { ...el, comments: [...el.comments, { ...payload.data }] }\n          : el\n      );\n    }\n    case CREATE_COMMENT_TO_COMMENT: {\n      const comment = payload.data;\n      console.log(1, payload);\n      const mainId = payload.description.mainId;\n      // console.log(2, mainId);\n      return state.map(el =>\n        el._id === mainId\n          ? {\n              ...el,\n              comments: [\n                ...el.comments.map(el =>\n                  el._id == payload.description.commentId\n                    ? {\n                        ...el,\n                        comments: [...el.comments, comment],\n                      }\n                    : el\n                ),\n              ],\n            }\n          : el\n      );\n    }\n\n    case EDIT_POST: {\n      const newState = state.map(el => (el._id === payload._id ? payload : el));\n      return newState;\n    }\n\n    case DELETE_POST: {\n      const { id } = payload;\n      const newPostState = state.filter(el => el._id !== id);\n      return newPostState;\n    }\n\n    default:\n      return state;\n  }\n};\nexport default contentReducer;\n"]},"metadata":{},"sourceType":"module"}